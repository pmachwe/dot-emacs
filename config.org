#+TITLE: Emacs Configuration
#+AUTHOR: Parikshit Machwe
#+STARTUP: outline
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./style.css">

* Introduction

The /org-babel/ mode allows for literate programming, i.e. programming
within documentation. This is a great way to organize the stuff
especially the configs which build up over the years. Here is a nice
video detailing about it.
[[https://www.youtube.com/watch?v=dljNabciEGg][Literate Programming]]

The other package that I came across recently [[https://github.com/jwiegley/use-package][use-package]]. This is a
great utility to not only organize the Emacs packages but improving
the load times by doing lazy loading. Some important notes about this
package.
+ =:init=: This section gets called everytime irrespective of loading
  so should be kept minimal.
+ =:config=: This section gets called after the package gets loaded
  and the package only gets loaded *when* it is required.
+ =:disabled t=: Use this to disable any package. Great for experimentation.
+ =:ensure t=: This makes sure to *install* if the package is not
  available. Great to have so that the configuration will work on a
  new machine as is. Use =setq use-package-always-ensure t= for all packages.
+ =:diminish=: Use /diminish/ package to avoid minor mode being
  printed on mode-line.
+ =:if=: Use this for conditional loading (only GUI or only OS).
  
#+BEGIN_SRC emacs-lisp
  ;; Always install packages if not available
  (setq use-package-always-ensure t)
#+END_SRC

* Basic Defaults

Override some basic default options upfont. Some options taken from
[[https://github.com/danielmai/.emacs.d/blob/master/config.org][here]].

#+BEGIN_SRC emacs-lisp
  ;; Basic settings

  ;; Give emacs a custom file to add its own stuff
  ;; Using "HOME" because user-emacs-directory just returns ~/.emacs.d
  ;; which does not work on Windows
  (setq custom-file (concat (getenv "HOME") "/custom.el"))
  (load custom-file 'noerror)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))) 
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))        
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; show time
  (display-time)

  ;; winner mode to undo/redo window configurations
  (winner-mode 1)

#+END_SRC

* Themes and Fonts

** Themes and Fonts

In this section, setting up the themes and fonts.

Tomorrow Night themes are downloaded from [[https://github.com/purcell/color-theme-sanityinc-tomorrow][here]].

#+BEGIN_SRC emacs-lisp
  ;; themes and fonts

  (set-default-font "Source Code Pro 14")

  (use-package monokai-theme
    :disabled t
    :init 
    (load-theme 'monokai t))

  (use-package color-theme-sanityinc-tomorrow
    :init
    (progn
      (load-theme 'sanityinc-tomorrow-night t)
      (set-face-attribute `mode-line nil
                          :box nil)
      (set-face-attribute `mode-line-inactive nil
                          :box nil)))

#+END_SRC

#+RESULTS:

** Modeline

Beautify the modeline.

#+BEGIN_SRC emacs-lisp
  ;; powerline

  (use-package powerline
    :init
    (powerline-center-theme))

#+END_SRC

* Org Mode

There is a great beginners guide at [[http://orgmode.org/worg/org-configs/org-customization-guide.html][Org Guide]]. Most of the settings
below are taken from it.

** Basics
Some basic settings first of all.

*NOTE:* The source code blocks will not have background when the
 language is specified due to a bug. More [[http://stackoverflow.com/questions/26290924/fontify-r-code-blocks-in-org-mode-8][here]]. Original post is
 [[http://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html][here]].

#+BEGIN_SRC emacs-lisp
  ;; add global settings in a hook
  ;; add org-mode specific normally

  ;(use-package org
  ;  :diminish org-indent-mode)


  (defun pm/org-mode-hooks()
    (org-indent-mode 1)
    (auto-fill-mode 1)
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda))

  (add-hook 'org-mode-hook 'pm/org-mode-hooks)

  ;; Do not subscript for _ and superscript for ^
  (setq org-use-sub-superscripts nil)

  ;; Beautify
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.20))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.15))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.10))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.05))))
   '(org-document-title ((t (:underline t :weight bold :height 1.3)))))

  ;; Org-directory
  (setq org-directory "~/org")
  (setq org-agenda-files '("~/org"))

  ;(defface org-block-begin-line
  ;  '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
  ;  "Face used for the line delimiting the begin of source blocks.")
  ;
  ;(defface org-block
  ;  '((t (:background "#000000")))
  ;  "Face used for the source block background.")
  ;
  ;(defface org-block-end-line
  ;  '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
  ;  "Face used for the line delimiting the end of source blocks.")

#+END_SRC

*** Some pending setups
**** TODO Setup flyspell and word correction with org mode

** Org Babel
Some settings specific to org-babel.

#+BEGIN_SRC emacs-lisp
  ;; add languages to babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (sh . t)))

  ;; Always evaluate
  (setq org-confirm-babel-evaluate nil)

  ;; Beautify within code blocks
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

** Other Packages for Org
Some other packages specific for org-mode.

*** Org Bullets
This package uses some UTF-8 characters for org-mode bullets.

#+BEGIN_SRC emacs-lisp
  ;; org-bullets for nicer bullets :)
  (use-package org-bullets
    :config
    (progn
      (org-bullets-mode 1)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+END_SRC

#+RESULTS:
: t

*** Org Reveal
This package lets org-mode files be exported to HTML5 Reveal.js
presentations. This requires Reveal.js to be installed.

From here: [[https://github.com/yjwen/org-reveal][org-reveal]]

#+BEGIN_SRC emacs-lisp
  ;; Org-reveal

  (use-package ox-reveal
    :init
    (setq org-reveal-root "file:///Users/pmachwe/Install/reveal.js/reveal.js-3.2.0"))

#+END_SRC

#+RESULTS:

*** Org Present
Converts an org document to a org presentation. Keeps level 1 as the
slide headline and the rest of the stuff is just text.

#+BEGIN_SRC emacs-lisp
  ;; Org Present

  (use-package org-present
    :ensure t)

#+END_SRC

*** Org Tree Slide
It is also similar to the 'org-present' package but it also captures
the bullets etc. More details [[https://github.com/takaxp/org-tree-slide/blob/master/README.org][here]].

Use F8 to start the presentation. Use C-> and C-< to move through the slides.

#+BEGIN_SRC emacs-lisp
  ;; org-tree-slide

  (use-package org-tree-slide
    :config
    (progn
      (define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
      (define-key org-mode-map (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)))

#+END_SRC

#+RESULTS:
: t

*** Org Pandoc
This allows for export to many different formats.
**** TODO Set this up

*** Org Journal
Simple package to write journals.

**** TODO Set this up
From here: [[http://www.emacswiki.org/emacs/OrgJournal][org-journal]]

*** Htmlize

For source code highlight in exports.

#+BEGIN_SRC emacs-lisp
  ;; htmlize

  (use-package htmlize
    :ensure t)

#+END_SRC
** Org Mobile
** Org Capture and Refile

#+BEGIN_SRC emacs-lisp
  ;; Setup a shortcut for org-capture

  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
#+END_SRC

#+RESULTS:
: ((org-agenda-files :maxlevel . 6))

* Ido

Ido mode with flex matching does a superior job of finding files than
Helm. So until flx is ported to helm, using ido for finding files and
switching buffers.

#+BEGIN_SRC emacs-lisp
  ;; ido mode

  (use-package ido
    :init
    (progn
      (ido-mode t)
      (ido-everywhere 1)
      (setq ido-use-faces nil))
    :bind (("C-x C-f" . ido-find-file)
           ("C-x b" . ido-switch-buffer)))

  (use-package flx-ido
    :init
    (progn
      (flx-ido-mode 1)
      (setq ido-enable-flex-matching t)))
#+END_SRC

* Helm

Helm takes the power of Emacs to another level. It makes its presence
felt in every experience with Emacs. A must have. A very nice tutorial
to set up Helm at [[http://tuhdo.github.io/helm-intro.html][Helm Intro]].

Helm needs to be loaded up-front and hence there is no need to use
/use-package/ for it. Also, there are many settings which could be
inter-dependent and might create conflicts in use-package. 

*** Install
Using /use-package/ only for initial installation, if not already installed.

#+BEGIN_SRC emacs-lisp
    (use-package helm)

    (use-package helm-swoop)

    (use-package helm-gtags
      :diminish helm-gtags-mode)

#+END_SRC

*** Basic Config

#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (require 'helm-config)

  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-in-side-p       t ; open helm buffer inside current window
        helm-move-to-line-cycle-in-source t ; move to end or beginning when reaching top or bottom of source.
        helm-ff-search-library-in-sexp    t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t)

  (helm-mode 1)

  (helm-autoresize-mode t)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (setq helm-apropos-fuzzy-match t)
  (setq helm-lisp-fuzzy-completion t)

  ;; IDO instead; (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-c h g") 'helm-google-suggest)

  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

  ;; helm-mini (using IDO)
  ;(global-set-key (kbd "C-x b") 'helm-mini)
  ;(setq helm-buffers-fuzzy-matching t
  ;      helm-recentf-fuzzy-match    t)

  ; (define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)
  ; (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

#+END_SRC

*** More Config

#+BEGIN_SRC emacs-lisp
  ;; helm-swoop and helm-occur
  (require 'helm-swoop)
  (global-set-key (kbd "C-c h o") 'helm-occur)

  ;; Change the keybinds to whatever you like :)
  (global-set-key (kbd "M-i") 'helm-swoop)
  (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
  (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
  (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

  ;; When doing isearch, hand the word over to helm-swoop
  (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;; From helm-swoop to helm-multi-swoop-all
  (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
  ;; When doing evil-search, hand the word over to helm-swoop
  ;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)

  ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
  (define-key helm-swoop-map (kbd "M-m") 'helm-multi-swoop-current-mode-from-helm-swoop)

  ;; Move up and down like isearch
  (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
  (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)

  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t)

  ;; If this value is t, split window inside the current window
  (setq helm-swoop-split-with-multiple-windows nil)

  ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  ;(setq helm-swoop-split-direction 'split-window-vertically)

  ;; If nil, you can slightly boost invoke speed in exchange for text color
  (setq helm-swoop-speed-or-color nil)

  ;; ;; Go to the opposite side of line from the end or beginning of line
  (setq helm-swoop-move-to-line-cycle t)

  ;; Optional face for line numbers
  ;; Face name is `helm-swoop-line-number-face`
  (setq helm-swoop-use-line-number-face t)


  ;; helm-gtags
  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-cg"
   helm-gtags-suggested-key-mapping t
   )

  (require 'helm-gtags)
  ;; Enable helm-gtags-mode
  (add-hook 'dired-mode-hook 'helm-gtags-mode)
  (add-hook 'eshell-mode-hook 'helm-gtags-mode)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)

  (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "M-*") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)

#+END_SRC

* Multiple Cursors

This is a cool package which allows editing mutliple lines together.

#+BEGIN_SRC emacs-lisp
  ;; mutliple cursors

  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))

  (global-set-key (kbd "C-c C-SPC") 'set-rectangular-region-anchor)

#+END_SRC

* Expand Region

#+BEGIN_SRC emacs-lisp
  ;; expand region

  (use-package expand-region
    :bind ("C-=" . er/expand-region))

#+END_SRC

* IBuffer

This needs to be configured properly.

#+BEGIN_SRC emacs-lisp
  ;; ibuffer

  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer-other-window)
    :config
    (progn
      (setq ibuffer-saved-filter-groups
            (quote (("mygroups"
                     ("dired" (mode . dired-mode))
                     ("perl" (mode . cperl-mode))
                     ("erc" (mode . erc-mode))
                     ("planner" (or
                                 (name . "^\\*Calendar\\*$")
                                 (name . "^diary$")
                                 (mode . muse-mode)))
                     ("emacs" (or
                               (name . "^\\*scratch\\*$")
                               (name . "^\\*Messages\\*$")))
                     ("gnus" (or
                              (mode . message-mode)
                              (mode . bbdb-mode)
                              (mode . mail-mode)
                              (mode . gnus-group-mode)
                              (mode . gnus-summary-mode)
                              (mode . gnus-article-mode)
                              (name . "^\\.bbdb$")
                              (name . "^\\.newsrc-dribble")))))))
      (setq ibuffer-expert t)
      (add-hook 'ibuffer-mode-hook
                '(lambda ()
                   (ibuffer-auto-mode 1)
                   (ibuffer-switch-to-saved-filter-groups "mygroups")))))


  ;(setq ibuffer-default-sorting-mode 'major-mode)
  ;(setq ibuffer-show-empty-filter-groups nil)
#+END_SRC

* Avy

Avy is a newer version of ace-jump-mode and provides far more
features. Hence, upgrading to this. Some resources:
+ [[https://github.com/abo-abo/avy][avy-mode]]
+ [[http://emacsredux.com/blog/2015/07/19/ace-jump-mode-is-dead-long-live-avy/][Avy on redux]]

Binding M-g g to avy-goto-line instead of normal goto-line.

Also, this is great because it works on all visible buffers, so no
need to keep switching bufers.

#+BEGIN_SRC emacs-lisp
  ;; Setup avy

  (use-package avy
    :bind (("C-c :" . avy-goto-char)
           ("C-c ;" . avy-goto-word-1)
           ("M-g g" . avy-goto-line)))
#+END_SRC

#+RESULTS:


Another package in the same league is ace-window. As per the
recommendation, mapping it to M-p which is not mapped by default to
any function. See [[https://github.com/abo-abo/ace-window][ace-window]] for other features like deleting a
window. Use 'x' and then window-number for this.

#+BEGIN_SRC emacs-lisp
  ;; ace-window

  (use-package ace-window
    :bind ("M-O" . ace-window))

#+END_SRC

#+RESULTS:

* Auto Completion

** Company Mode

This has great many backends for various programming languages and
works well with gtags, libclang etc. Even elpy mode works with this.
[[http://company-mode.github.io/][company-mode]]

Also a useful tip [[http://emacs.stackexchange.com/questions/5664/shell-bash-completion-window][here]] to complete shell using company instead of helm
(which could be bit irritating as it opens a small buffer below).

If clang is available, could also use company-clang but mostly
company-gtags should do.

#+BEGIN_SRC emacs-lisp
  ;; Company mode

  (use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (progn
      (add-hook 'shell-mode-hook #'company-mode)
      (setq company-backends '(company-elisp
                               company-ropemacs
                               company-gtags
                               company-dabbrev-code
                               company-keywords
                               company-files
                               company-dabbrev)))
    :diminish company-mode)

  (use-package company-c-headers
    :config
    (add-to-list 'company-backends 'company-c-headers))

  ;; Creates problems with yas-expand
  ;;     (define-key prog-mode-map (kbd "TAB") #'company-complete)
  ;;     (eval-after-load "shell"
  ;;      '(define-key shell-mode-map (kbd "TAB") #'company-complete))
#+END_SRC

#+RESULTS:
: t

** Auto complete

Disabling this and will use company mode.

#+BEGIN_SRC emacs-lisp
  ;; auto-complete

  (use-package auto-complete
    :disabled t
    :ensure t
    :config
    (progn
      (add-to-list 'ac-dictionary-directories 
                   (expand-file-name "~/.emacs.d/elpa/auto-complete-20150618.1949/dict"))
      (setq ac-comphist-file
            (expand-file-name "~/.emacs.d/ac-comphist.dat"))
      (ac-config-default)
      ; auto-complete does not work with flyspell
      (ac-flyspell-workaround)))

    ;:diminish auto-complete-mode)

#+END_SRC

** FASD

This looks to be a good and fast way to work on Shell and has an emacs
package also. Look at it sometime.

**** FASD
[[https://gitlab.com/emacs-stuff/fasd-shell][fasd-shell]]

* Tramp

Move the settings to OS specific. Shell not working properly for now.

#+BEGIN_SRC emacs-lisp
  ;; TRAMP for remote editing

  (use-package tramp
    :init
    (progn
      (setq tramp-default-method "plink"
            tramp-default-user "pmachwe"
            tramp-default-host "dcamd44")))

#+END_SRC

#+RESULTS:

* Yasnippet

#+BEGIN_SRC emacs-lisp
  ;; yasnippets

  (use-package yasnippet
    :ensure t)

#+END_SRC

* SmartParens

Parenthesis matching.

#+BEGIN_SRC emacs-lisp
  ;; Smart Parens

  (use-package smartparens
    :init
    (progn
      (smartparens-mode 1)
      (add-hook 'prog-mode-hook #'smartparens-mode))
    :diminish smartparens-mode)

  ;; when you press RET, the curly braces automatically
  ;; add another newline
  (sp-with-modes '(c-mode c++-mode)
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
    (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                              ("* ||\n[i]" "RET"))))
#+END_SRC

#+RESULTS:

* Flycheck

On the fly syntax checking for most languages.

#+BEGIN_SRC emacs-lisp
  ;; Flycheck

  (use-package flycheck
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode))

#+END_SRC

* Sr-speedbar

This is a cool way to quickly visualize open buffers or files in the
directory. Also, it could extend to show functions in many
progaramming languages.

#+BEGIN_SRC emacs-lisp
  ;; sr-speedbar

  (use-package sr-speedbar
    :bind ("<f1>" . sr-speedbar-toggle)
    :config
    (progn
      (speedbar-add-supported-extension ".c")
     (add-to-list 'speedbar-fetch-etags-parse-list
              '("\\.c" . speedbar-parse-c-or-c++tag))))
#+END_SRC

#+RESULTS:

* God Mode

Handy while browsing stuff (something like Vim's command mode).

#+BEGIN_SRC emacs-lisp
  ;; God Mode

  (use-package god-mode
    :bind ("<f2>" . god-mode))
#+END_SRC

* Visual Regexp

The packages allows visual feedback while replacing some regular
expression. The package with steroids allows python style regular
expressions. It also allow expressions to insert values (say SNo to
items in increasing order).

#+BEGIN_SRC emacs-lisp
  ;; visual regexp

  (use-package visual-regexp)
  (use-package visual-regexp-steroids
    :bind (("C-c r" . vr/replace)
           ("C-c q" . vr/query-replace)
           ("C-c m" . vr/mc-mark)           ; if you use multiple-cursors
           ("C-s" . vr/isearch-forward)     ; C-M-s
           ("C-r" . vr/isearch-backward)))  ; C-M-r

#+END_SRC

#+RESULTS:
: vr/isearch-backward

* Magit

Magit is the best package to work with Git. 

#+BEGIN_SRC emacs-lisp
  ;; Magit

  (use-package magit
    :bind ("<f6>" . magit-status))

#+END_SRC

* Perforce

Used at work.

#+BEGIN_SRC emacs-lisp
  ;; Perforce

  (use-package p4)

#+END_SRC

#+RESULTS:

* Programming Languages
** Common Settings 

Some common settings in this section.

#+BEGIN_SRC emacs-lisp
  ;; common settings for all programming languages

  (defun my/common-prog-hooks()
  ;  (if window-system (linum-mode 1))
    (local-set-key (kbd "RET") 'newline-and-indent)
    (yas-reload-all)
    (yas-minor-mode 1))

  ;; No tabs
  (setq-default indent-tabs-mode nil)

  ;; Allow folding of code blocks
  (add-hook 'c-mode-common-hook   'hs-minor-mode)

  ;; add to all
  (add-hook 'prog-mode-hook 'my/common-prog-hooks)
#+END_SRC

#+RESULTS:
| my/common-prog-hooks | smartparens-mode |

** C

In this section, there will be specific settings for C/C++.

#+BEGIN_SRC emacs-lisp
  ;; c/c++

  (setq-default c-default-style "stroustrup"
                c-basic-offset 4)

  ;; Open .h file in cpp mode
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

  (defun my/cpp-hooks()
  ;  (ggtags-mode 1)
    (helm-gtags-mode 1)
    (my/common-prog-hooks))

  ;(add-hook 'c++-mode-hook 'my/cpp-hooks)
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                (my/cpp-hooks))))


  ;; TODO Setup google style check
#+END_SRC

#+RESULTS:

Adding this to not reconfirm the /compilation/ command.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f7>") (lambda ()
                                 (interactive)
                                 (setq-local compilation-read-command nil)
                                 (call-interactively 'compile)))
#+END_SRC

#+RESULTS:

** Python

In this section, there will be specific settings for python. Mostly
related to elpy.

#+BEGIN_SRC emacs-lisp
  ;; python settings

  (use-package elpy
    :ensure t)

  ;(use-package highlight-indentation-mode)

  ;(use-package fci)

  (defun my/python-hooks()
    (my/common-prog-hooks)
    (elpy-enable)
    (elpy-mode 1))
   ; (highlight-indentation-mode)
    ;(fci-mode 1))

  (setq-default python-indent-offset 4)

  (add-hook 'python-mode-hook 'my/python-hooks)

#+END_SRC

** Elisp

Some settings for Elisp.

#+BEGIN_SRC emacs-lisp
  ;; Setup smartparens keybindings and use the stricter mode
  (add-hook 'emacs-lisp-mode-hook '(lambda ()
                                     (require 'smartparens-config)
                                     (sp-use-smartparens-bindings)
                                     (smartparens-strict-mode)))

#+END_SRC

* OS Specific

** Windows
On Windows, there a few annoyances that happen with the default
installation. The Windows installation is done from
[[http://emacsbinw64.sourceforge.net/][Win Install]].
Need to have this at the top to set appropriate environment.

+ Console window opens up. Fix it by retargeting the shortcut to
  /runemacs.exe/. More on
  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-Startup.html][Windows Startup]].
+ Use the shortcut properties to change the start folder or set the
  variable =default-directory=.
+ Make sure the /HOME/ environment variable is set before starting up
  Emacs for the first time, otherwise it creates .emacs in a obscure
  location (on Win7: C:/Users/<login>/AppData/Roaming).
+ If /HOME/ is properly set, then /Dropbox/ will also be there, so
  MobileOrg should work fine.
+ Even on Win7, create a folder /org/ in /HOME/ folder so that
  org-mode works fine.

#+BEGIN_SRC emacs-lisp
  ;; Windows specific settings

  (if (or (string-equal system-type "windows-nt")
          (string-equal system-type "ms-dos"))
      (progn
        (setq default-directory (getenv "HOME"))
        ; Special settings for Emacs to work on Windows smoothly
        (remove-hook 'find-file-hooks 'vc-find-file-hook)
        (setq w32-get-true-file-attributes nil)))
  
#+END_SRC

* Custom Shortcuts

The common commands are mapped to single key shortcuts.

Note: Some of the keybindings of the form C-<special char>
(e.g. C-.). Apparantly, the terminal emulators pass the ASCII value of
the character minus 64. For some special character this leads to
negative values and hence the terminal emulators do not understand
these.

Hence, converting such keybindings to the form C-c <special char> or
M-<char>.

Note: A good suggestion is to create a minor-mode and change create
the custom keybindings in the minor mode. This should help avoid any
clashes and also all the custom keybindings could be turned off in one
go with the minor mode. This idea is taken from [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][here]].

Another good suggestion is to use C-. as a prefix (in the same way as
C-c and define many more keybindings). These might not work in some
terminals. Some other prefixes that
could be used are C-m which is also bound to
newline-and-indent. Others are C-h <j|o|q|u|x|y|z> as these
keybindings are unused. Using C-. for now.

Using "h" for help, "c" for personal configurations.

#+BEGIN_SRC emacs-lisp
  ;; Define personal shortcuts and keybindings here (non-package specific)

  (defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")

  ;; Shell
  (define-key my-keys-minor-mode-map (kbd "<f5>") 'shell)
  (define-key my-keys-minor-mode-map (kbd "S-<f5>") 'eshell)

  ;; grep and find
  (define-key my-keys-minor-mode-map (kbd "C-c g g") 'helm-do-zgrep)
  (define-key my-keys-minor-mode-map (kbd "C-c g r") 'rgrep)
  (define-key my-keys-minor-mode-map (kbd "C-c f g") 'find-grep)
  (define-key my-keys-minor-mode-map (kbd "C-c /") 'helm-imenu)

  ;; override for regexp searches
  ;; using visual-regexp
  ;(define-key my-keys-minor-mode-map (kbd "C-s") 'isearch-forward-regexp)
  ;(define-key my-keys-minor-mode-map (kbd "C-r") 'isearch-backward-regexp)
  (define-key my-keys-minor-mode-map (kbd "C-M-s") 'isearch-forward)
  (define-key my-keys-minor-mode-map (kbd "C-M-r") 'isearch-backward)

  ;; especially useful for shell
  (define-key my-keys-minor-mode-map (kbd "C-c .") 'end-of-buffer)

  ;; M-o to switch to other buffer
  ;(define-key my-keys-minor-mode-map (kbd "M-o") (lambda() (interactive) (other-window 1)))
  ;(define-key my-keys-minor-mode-map (kbd "M-S-o") (lambda() (interactive) (other-window 2)))

  ;; Make switching buffers and opening files single key
  ;; (using IDO for now
  ;(define-key my-keys-minor-mode-map (kbd "C-.") 'helm-mini)
  ;(define-key my-keys-minor-mode-map (kbd "C-,") 'helm-find-files)

  ;; indent-new-comment-line (C-M-j) was also bound to M-j
  ;; using it for file opening
  (define-key my-keys-minor-mode-map (kbd "M-j") 'ido-find-file)
  (define-key my-keys-minor-mode-map (kbd "M-J") 'ido-find-file-other-window)
  (define-key my-keys-minor-mode-map (kbd "M-o") 'ido-switch-buffer)
  (define-key my-keys-minor-mode-map (kbd "M-k") 'kill-buffer-and-window)
  (define-key my-keys-minor-mode-map (kbd "M-K") 'kill-buffer)

  ;; avy
  (define-key my-keys-minor-mode-map (kbd "C-c :") 'avy-goto-char)
  (define-key my-keys-minor-mode-map (kbd "C-c ;") 'avy-goto-word-1)
  (define-key my-keys-minor-mode-map (kbd "M-g g") 'avy-goto-line)

  ;; C-m h <key> will be all help related bindings
  (setq emacs-help-dir "~/.emacs.d/help/")
  (define-key my-keys-minor-mode-map (kbd "C-. h S") '(lambda()
                                                        (interactive)
                                                       (find-file-other-window (concat emacs-help-dir "smartparens.txt"))))

  (define-key my-keys-minor-mode-map (kbd "C-. h M") '(lambda()
                                                        (interactive)
                                                        (find-file-other-window (concat emacs-help-dir "magit.org"))))

  (define-key my-keys-minor-mode-map (kbd "C-. h C") '(lambda()
                                                        (interactive)
                                                        (find-file-other-window (concat user-emacs-directory "config.org"))))

  ;; Change fonts sometimes
  (define-key my-keys-minor-mode-map (kbd "C-. c f") '(lambda(font size)
                                                    (interactive "sFont: \nsSize: ")
                                                    (set-default-font (concat font " " size))))
  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    t " my-keys" 'my-keys-minor-mode-map)

  (my-keys-minor-mode 1)

  ;; Note that you may need to turn this off in the minibuffer:
  (defun my-minibuffer-setup-hook ()
    (my-keys-minor-mode 0))

  (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)
#+END_SRC

* Items to Fix
*** TODO diminish not working as it is not identifying minor-modes like helm-mode, org-indent-mode

* Package to look into
*** abbrev-mode
*** google-this
*** lookup
Some elisp functions to facilitate lookup of queries to various sites
like Wikipedia, Google etc.
[[http://ergoemacs.org/emacs/emacs_lookup_ref.html][lookup-setup]]
*** edit-server
[[http://www.emacswiki.org/emacs/Edit_with_Emacs][edit-server]]
+ Needs edit-server-htmlize to work with GMail.
+ Also check the markdown mode.

* Some Useful Tips

** Word Navigation

+ The * operation of vim could be achieved by
  =isearch-forward-symbol-at-point= which is bound to *M-s .* and
  later on normal C-s and C-r should do.
+ Also the /symbol/ igores the '_' or '-' in the word which is really
  cool.
+ There are navigation commands =forward-symbol= which jumps to the
  next whitespace. There is no =backward-symbol= and hence a negative
  prefix argument needs to be given. Interestingly, there are
  shortcuts that achieve both forward and backward movements C-M-f and
  C-M-b which basically are =forward-sexp= and =backward-sexp= which
  work the same way for text.
+ Found some modes /subword/ and /superword/ in Emacs 24.4 which will
  convert all word related commands to symbols and vice-versa.
+ Look at this sometime: [[http://www.emacswiki.org/emacs/FastNav][FastNav]].
+ Tips with isearch: [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Isearch-Yank.html][isearch-yank]].

|----------+----------------------------------------------------|
| Shortcut | Binding                                            |
|----------+----------------------------------------------------|
| M s .    | * of vim, ignores symbols like - or _              |
| C-M-f    | forward-sexp                                       |
| C-M-b    | backward-sexp                                      |
| M-a      | Move start a sentence                              |
| M-e      | Move end of sentence                               |
| C-M-a    | Start of para/function                             |
| C-M-e    | End of para/function                               |
| M-m      | Reach start of indented statement                  |
| C-M-SPC  | Start marking from current position                |
|----------+----------------------------------------------------|
| C-S-f    | Adding Shift to movement commands starts selecting |
|----------+----------------------------------------------------|

** File Navigation

+ =find-file-other-window=: Bound to C-x 4 f. Have mapped this to
  "M-J" as this is very useful.
+ M-PgUp and M-PgDn move the other buffer.
+ C-x C-SPC will go to previous mark

** Kill and Yank

Found a good function [[http://emacs.stackexchange.com/questions/2347/kill-or-copy-current-line-with-minimal-keystrokes][here]] where the normal C-w and M-w will kill or
copy the whole line if nothing is selected.

#+BEGIN_SRC emacs-lisp
  ;; Kill/Copy full line if nothing is selected

  (defun slick-cut (beg end)
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (list (line-beginning-position) (line-beginning-position 2)))))

  (advice-add 'kill-region :before #'slick-cut)

  (defun slick-copy (beg end)
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position) (line-beginning-position 2)))))

  (advice-add 'kill-ring-save :before #'slick-copy)

#+END_SRC

** Helm

*** Copy from menu

"C-c C-y" will copy the menu item currently highlighted in helm. Very
useful.

** General Tips

*** Get the font details

"Place your cursor on the point that you want to change the font, and
type C-u C-x =, and that will tell you (among other things) the name
of the fonts at that point."

Taken from [[http://stackoverflow.com/questions/26290924/fontify-r-code-blocks-in-org-mode-8][stackoverflow]].
 
* Resources

Listing some great resources about setting up Emacs.

+ [[http://tuhdo.github.io/c-ide.html][Emacs as C IDE]]
+ [[http://daemianmack.com/magit-cheatsheet.html][Magit CheatSheet]]
