#+TITLE: Emacs Configuration
#+AUTHOR: Parikshit Machwe
#+STARTUP: outline
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./style.css">

* Introduction

The /org-babel/ mode allows for literate programming, i.e. programming
within documentation. This is a great way to organize the stuff
especially the configs which build up over the years. Here is a nice
video detailing about it.
[[https://www.youtube.com/watch?v=dljNabciEGg][Literate Programming]]

The other package that I came across recently [[https://github.com/jwiegley/use-package][use-package]]. This is a
great utility to not only organize the Emacs packages but improving
the load times by doing lazy loading. Some important notes about this
package.
+ =:init=: This section gets called everytime irrespective of loading
  so should be kept minimal.
+ =:config=: This section gets called after the package gets loaded
  and the package only gets loaded *when* it is required.
+ =:disabled t=: Use this to disable any package. Great for experimentation.
+ =:ensure t=: This makes sure to *install* if the package is not
  available. Great to have so that the configuration will work on a
  new machine as is. Use =setq use-package-always-ensure t= for all packages.
+ =:diminish=: Use /diminish/ package to avoid minor mode being
  printed on mode-line.
+ =:if=: Use this for conditional loading (only GUI or only OS).
  
#+BEGIN_SRC emacs-lisp
  ;; Always install packages if not available
  (setq use-package-always-ensure t)
#+END_SRC

* Basic Defaults

Override some basic default options upfont. Some options taken from
[[https://github.com/danielmai/.emacs.d/blob/master/config.org][here]].

#+BEGIN_SRC emacs-lisp
  ;; Basic settings

  ;; Give emacs a custom file to add its own stuff
  ;; Using "HOME" because user-emacs-directory just returns ~/.emacs.d
  ;; which does not work on Windows
  (setq custom-file (concat (getenv "HOME") "/custom.el"))
  (load custom-file 'noerror)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))) 
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))        
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; show time
  (display-time)

  ;; winner mode to undo/redo window configurations
  (winner-mode 1)

  ;; simply bold the current line
  (if window-system
      ;(custom-set-faces
      ; '(highlight ((t (:background nil :foreground nil :bold t)))))
      (global-hl-line-mode 1))

  ;; always show the function
  (which-function-mode 1)

  ;; no bells please
  (defun my-bell-func()) ;; empty
  (setq ring-bell-function 'my-bell-func)
  (setq visible-bell nil)

  ;; http://endlessparentheses.com/faster-pop-to-mark-command.html
  ;; Go up last positions using C-u C-SPC C-SPC
  ;; instead of C-u C-SPC C-u C-SPC
  (setq set-mark-command-repeat-pop t)

  ;; If same marks are saved in the ring, pop out the same ones
  (defun my/multi-pop-to-mark (orig-fun &rest args)
    "Call ORIG-FUN until the cursor moves.
  Try the repeated popping up to 10 times."
    (let ((p (point)))
      (dotimes (i 10)
        (when (= p (point))
          (apply orig-fun args)))))

  (advice-add 'pop-to-mark-command :around
              #'my/multi-pop-to-mark)

  ;; Bar type curson
  (setq-default cursor-type 'bar)

#+END_SRC

* Themes and Fonts

** Themes and Fonts

In this section, setting up the themes and fonts.

Tomorrow Night themes are downloaded from [[https://github.com/purcell/color-theme-sanityinc-tomorrow][here]].

#+BEGIN_SRC emacs-lisp
  ;; themes and fonts

  ;; Move this setup to work.el as it is dependent on the
  ;; environment, eg font-names are different on Linux than Win
  ;(set-default-font "InputMono 11")

  (use-package monokai-theme
    :disabled t
    :init 
    (load-theme 'monokai t))

  (use-package color-theme-sanityinc-tomorrow
    :disabled t
    :if window-system
    :init
    (progn
      (load-theme 'sanityinc-tomorrow-night t)
      (set-face-attribute `mode-line nil
                          :box nil)
      (set-face-attribute `mode-line-inactive nil
                          :box nil)))

  (use-package leuven-theme
    :disabled
    :config
    (progn
      (load-theme 'leuven t)
      (set-face-attribute `mode-line nil
                          :box nil)
      (set-face-attribute `mode-line-inactive nil
                          :box nil)))

  (use-package eclipse-theme
    :disabled
    :config
    (load-theme 'eclipse t))

  (use-package material-theme
    :disabled
    :init
    (progn
      (load-theme 'material t)
      (set-face-attribute `mode-line nil
                          :box nil)
      (set-face-attribute `mode-line-inactive nil
                          :box nil)))

  (use-package afternoon-theme
    :config
    (load-theme 'afternoon t)
    (set-face-attribute 'mode-line nil
                        :family 'unspecified)
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil))

  (use-package arjen-grey-theme
    :disabled t
    :config
    (load-theme 'arjen-grey t)
    (set-face-attribute 'which-func nil
                        :foreground "SkyBlue1"))

  (use-package spacemacs-theme
    :disabled t
    :if window-system
    :init
    (load-theme 'spacemacs-dark t))

  ;; For doom
  (use-package nlinum
    :disabled t)

  (use-package doom-themes
    :disabled t
    :if window-system
    :init
    (load-theme 'doom-one t)
    :config
    ;;; Settings (defaults)
    (setq doom-enable-bold t    ; if nil, bolding are universally disabled
          doom-enable-italic t  ; if nil, italics are universally disabled

          ;; doom-one specific settings
          doom-one-brighter-modeline nil
          doom-one-brighter-comments nil
          )

    ;;; OPTIONAL
    ;; brighter source buffers
    (add-hook 'find-file-hook 'doom-buffer-mode)
    ;; brighter minibuffer when active
    (add-hook 'minibuffer-setup-hook 'doom-brighten-minibuffer)
    ;; Enable custom neotree theme
    (require 'doom-neotree)    ; all-the-icons fonts must be installed!
    ;; Enable nlinum line highlighting
    (require 'doom-nlinum)     ; requires nlinum and hl-line-mode)
    (setq org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t)
    (add-hook 'ediff-prepare-buffer-hook 'doom-buffer-mode)
    (require 'doom-nlinum)
    (require 'doom-neotree))

  ;; Some more configurations

  ;; hlinum
  (use-package hlinum
    :config
    (fringe-mode -1)
    (hlinum-activate)
    (defadvice linum-update-window (around linum-dynamic activate)
    (let* ((w (length (number-to-string
                       (count-lines (point-min) (point-max)))))
           (linum-format (concat " %" (number-to-string w) "d ")))
      ad-do-it)))

  ;; Always use same color for selected region
  ;; otherwise global-hl-line-mode interferes
  (set-face-attribute 'region nil :foreground "black" :background "#a2bff4")

  ;; Make sure line numbers always look the same
  (if window-system
      (set-face-attribute 'linum-highlight-face nil :background nil :foreground "white"))

  ;; Some themes have bad face for this, fix it
  (set-face-attribute 'which-func nil :foreground "SkyBlue1")
#+END_SRC

** Modeline

Beautify the modeline.

#+BEGIN_SRC emacs-lisp
  ;; powerline

  (use-package powerline
    :disabled t
    :if window-system
    :init
    (powerline-center-theme))

  ;; smart-mode-line
  (use-package smart-mode-line-powerline-theme
    :disabled t)

  (use-package smart-mode-line
    :disabled t
    :if window-system
    :init
    (setq sml/no-confirm-load-theme t)
    :config
    (setq sml/theme 'powerline)
    (sml/setup))

  ;; from spacemacs
  ;(use-package spaceline
  ;  :if window-system
  ;  :init
  ;  (setq powerline-default-separator 'wave)
  ;  :config
  ;  (require 'spaceline-config)
  ;  (spaceline-spacemacs-theme)
  ;  (spaceline-info-mode 1))

  ;; Taken from: https://github.com/prassee/prassee-emacs-theme
  (use-package spaceline
    :if window-system
    :config
    (progn
      (require 'spaceline-config)
      (setq powerline-default-separator 'slant)
      (setq spaceline-workspace-numbers-unicode t)
      (setq spaceline-separator-dir-left '(left . left))
      (setq spaceline-separator-dir-right '(right . right))
      (setq powerline-height 27)
      (spaceline-toggle-window-number-on)
      (spaceline-toggle-buffer-modified-on)
      (spaceline-toggle-major-mode-on)
      (spaceline-toggle-battery-on)
      (spaceline-toggle-hud-on)
      (spaceline-toggle-projectile-root-on)
      (spaceline-emacs-theme)))

  ;; for mac
  (setq ns-use-srgb-colorspace nil)

#+END_SRC

#+RESULTS:

** Icons

Display nice icons in Emacs. Looks at the documentation at [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].

#+BEGIN_SRC emacs-lisp

  ;; all-the-icons
  (use-package all-the-icons)
#+END_SRC

#+RESULTS:

* Org Mode

There is a great beginners guide at [[http://orgmode.org/worg/org-configs/org-customization-guide.html][Org Guide]]. Most of the settings
below are taken from it.

** Basics
Some basic settings first of all.

*NOTE:* The source code blocks will not have background when the
 language is specified due to a bug. More [[http://stackoverflow.com/questions/26290924/fontify-r-code-blocks-in-org-mode-8][here]]. Original post is
 [[http://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html][here]].

#+BEGIN_SRC emacs-lisp
  ;; add global settings in a hook
  ;; add org-mode specific normally

  ;(use-package org
  ;  :diminish org-indent-mode)

  ;(diminish 'org-indent-mode)

  ;; disabling org-indent-mode and auto-fill-mode
  (defun pm/org-mode-hooks()
    (org-indent-mode 1)
    ;(auto-fill-mode 1)
    (bind-key "C-c l" 'org-store-link)
    (bind-key "C-c a" 'org-agenda))

  (add-hook 'org-mode-hook 'pm/org-mode-hooks)

  ;; Do not subscript for _ and superscript for ^
  (setq org-use-sub-superscripts nil)

  ;; Beautify
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.20))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.15))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.10))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.05))))
   '(org-document-title ((t (:underline t :weight bold :height 1.3)))))

  ;; Org-directory
  (setq org-directory "~/org")
  (setq org-agenda-files '("~/org"))

  ;; Use unicode char instead of ...
  (when window-system
    (setq org-ellipsis "…"))

  ;(defface org-block-begin-line
  ;  '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
  ;  "Face used for the line delimiting the begin of source blocks.")
  ;
  ;(defface org-block
  ;  '((t (:background "#000000")))
  ;  "Face used for the source block background.")
  ;
  ;(defface org-block-end-line
  ;  '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
  ;  "Face used for the line delimiting the end of source blocks.")

#+END_SRC

#+RESULTS:
: …

*** Some pending setups
**** TODO Setup flyspell and word correction with org mode

** Org Babel
Some settings specific to org-babel.

#+BEGIN_SRC emacs-lisp
  ;; add languages to babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (sh . t)))

  ;; Always evaluate
  (setq org-confirm-babel-evaluate nil)

  ;; Beautify within code blocks
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

** Other Packages for Org
Some other packages specific for org-mode.

*** Org Bullets
This package uses some UTF-8 characters for org-mode bullets.

#+BEGIN_SRC emacs-lisp
  ;; org-bullets for nicer bullets :)
  ;; disabling because does not work well with leuven theme
  (use-package org-bullets
    :if window-system
    :config
    (progn
      (org-bullets-mode 1)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+END_SRC


*** Org Reveal
This package lets org-mode files be exported to HTML5 Reveal.js
presentations. This requires Reveal.js to be installed.

From here: [[https://github.com/yjwen/org-reveal][org-reveal]]

#+BEGIN_SRC emacs-lisp
  ;; Org-reveal

  (use-package ox-reveal
    :config
    (setq org-reveal-root "file:///Users/pmachwe/Install/reveal.js/reveal.js-3.2.0"))

#+END_SRC

*** Org Present
Converts an org document to a org presentation. Keeps level 1 as the
slide headline and the rest of the stuff is just text.

#+BEGIN_SRC emacs-lisp
  ;; Org Present

  (use-package org-present)

#+END_SRC

*** Org Tree Slide
It is also similar to the 'org-present' package but it also captures
the bullets etc. More details [[https://github.com/takaxp/org-tree-slide/blob/master/README.org][here]].

Use F8 to start the presentation. Use C-> and C-< to move through the slides.

#+BEGIN_SRC emacs-lisp
  ;; org-tree-slide

  (use-package org-tree-slide
    :config
    (progn
      (define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
      (define-key org-mode-map (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)))

#+END_SRC

#+RESULTS:
: t

*** Org Pandoc
This allows for export to many different formats.
**** TODO Set this up

*** Org Journal
Simple package to write journals.

**** TODO Set this up
From here: [[http://www.emacswiki.org/emacs/OrgJournal][org-journal]]

*** Htmlize

For source code highlight in exports.

#+BEGIN_SRC emacs-lisp
  ;; htmlize

  (use-package htmlize
    :ensure t)

#+END_SRC
** Org Mobile
** Org Capture and Refile

#+BEGIN_SRC emacs-lisp
  ;; Setup a shortcut for org-capture

  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (bind-key "C-c c" 'org-capture)
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
#+END_SRC

#+RESULTS:
: ((org-agenda-files :maxlevel . 6))

* Markdown Mode

#+BEGIN_SRC emacs-lisp

  ;; Markdown mode
  (use-package markdown-mode
    :defer t)

#+END_SRC

* Recentf

Enable the recentf package.

#+BEGIN_SRC emacs-lisp

  ;; recentf
  (use-package recentf
    :config
    (recentf-mode t)
    (setq recentf-max-saved-items 50))

#+END_SRC

* Ido

Ido mode with flex matching does a superior job of finding files than
Helm. So until flx is ported to helm, using ido for finding files and
switching buffers.

#+BEGIN_SRC emacs-lisp
  ;; ido mode

  (use-package ido
    :config
    (progn
      (ido-mode t)
      (ido-everywhere 1)
      (setq ido-use-virtual-buffers t)
      (setq ido-use-faces nil))
    :bind (("C-x C-f" . ido-find-file)
           ("C-x b" . ido-switch-buffer)))

  (use-package flx-ido
    :config
    (progn
      (flx-ido-mode 1)
      (setq ido-enable-flex-matching t)))

  (use-package ido-vertical-mode
    :disabled t
    :config
    (progn
      (ido-vertical-mode 1)
      (setq ido-vertical-show-count t)
      (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)))
#+END_SRC

#+RESULTS:

* Smex

This might be faster than helm-M-x, so trying out.

#+BEGIN_SRC emacs-lisp

  ;; Smex
  (use-package smex
    :bind(("M-x" . smex)
          ("M-X" . smex-major-mode-commands))
    :config
    (smex-initialize))

#+END_SRC

* Helm

Helm takes the power of Emacs to another level. It makes its presence
felt in every experience with Emacs. A must have. A very nice tutorial
to set up Helm at [[http://tuhdo.github.io/helm-intro.html][Helm Intro]].

#+BEGIN_SRC emacs-lisp

  (use-package helm
    :disabled t
    :bind(
          ("M-x" . helm-M-x)
          ("M-y" . helm-show-kill-ring)
          ("C-c h g" . helm-google-suggest)
          :map helm-map
          ([tab] . helm-execute-persistent-action) ; rebind tab to run persistent action
          ("C-i" . helm-execute-persistent-action) ; make TAB works in terminal
          ("C-z" . helm-select-action)) ; list actions using C-z
    :config
    (progn
      (require 'helm-config)
      ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
      ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
      ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
      (global-set-key (kbd "C-c h") 'helm-command-prefix)
      (global-unset-key (kbd "C-x c"))
      (when (executable-find "curl")
        (setq helm-google-suggest-use-curl-p t))

      (setq helm-split-window-in-side-p       t ; open helm buffer inside current window
            helm-move-to-line-cycle-in-source t ; move to end or beginning when reaching top or bottom of source.
            helm-ff-search-library-in-sexp    t ; search for library in `require' and `declare-function' sexp.
            helm-scroll-amount                8 ; scroll 8 lines other window using M-<next>/M-<prior>
            helm-ff-file-name-history-use-recentf t)

      (helm-mode 1)
      (helm-autoresize-mode t)
      (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
      (setq helm-apropos-fuzzy-match t)
      (setq helm-lisp-fuzzy-completion t)
      (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

      ;; Beautify
      (set-face-attribute 'helm-selection nil
                      :background nil
                      :foreground nil
                      :bold t
                      :italic t
                      :underline t)

      (set-face-attribute 'helm-source-header nil
                          :background nil
                          :foreground nil
                          :underline t
                          :bold t
                          :height 1.3
                          :family "Sans Serif"))
    :diminish helm-mode)

  ;; helm-mini (using IDO)
  ;(global-set-key (kbd "C-x b") 'helm-mini)
  ;(setq helm-buffers-fuzzy-matching t
  ;      helm-recentf-fuzzy-match    t)

  ; (define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)
  ; (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

  ;; helm-swoop and helm-occur
  (use-package helm-swoop
    :disabled t
    :bind (("C-c h o" . helm-occur)
           ("M-i" . helm-swoop)
           ("M-I" . helm-swoop-back-to-last-point)
           ("C-c M-i" . helm-multi-swoop)
           ("C-x M-i" . helm-multi-swoop-all)
           :map isearch-mode-map
           ;; When doing isearch, hand the word over to helm-swoop
           ("M-i" . helm-swoop-from-isearch)
           :map helm-swoop-map
           ;; From helm-swoop to helm-multi-swoop-all
           ("M-i" . helm-multi-swoop-all-from-helm-swoop)
           ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
           ("M-m" . helm-multi-swoop-current-mode-from-helm-swoop)
           ;; Move up and down like isearch
           ("C-r" . helm-previous-line)
           ("C-s" . helm-next-line)
           ("C-r" . helm-previous-line)
           ("C-s" . helm-next-line))
    :config
    (progn
      ;; Save buffer when helm-multi-swoop-edit complete
      (setq helm-multi-swoop-edit-save t)
      ;; If this value is t, split window inside the current window
      (setq helm-swoop-split-with-multiple-windows nil)
      ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
      ;(setq helm-swoop-split-direction 'split-window-vertically)
      ;; If nil, you can slightly boost invoke speed in exchange for text color
      (setq helm-swoop-speed-or-color nil)
      ;; Go to the opposite side of line from the end or beginning of line
      (setq helm-swoop-move-to-line-cycle t)
      ;; Optional face for line numbers
      ;; Face name is `helm-swoop-line-number-face`
      (setq helm-swoop-use-line-number-face t)))


  ;; helm-gtags
  (use-package helm-gtags
    :disabled t
    :config
    (progn
      (setq
       helm-gtags-ignore-case t
       helm-gtags-auto-update t
       helm-gtags-use-input-at-cursor t
       helm-gtags-pulse-at-cursor t
       helm-gtags-prefix-key "\C-cg"
       helm-gtags-suggested-key-mapping t)
      (add-hook 'dired-mode-hook 'helm-gtags-mode)
      (add-hook 'eshell-mode-hook 'helm-gtags-mode)
      (add-hook 'c-mode-hook 'helm-gtags-mode)
      (add-hook 'c++-mode-hook 'helm-gtags-mode)
      (add-hook 'asm-mode-hook 'helm-gtags-mode))
    :bind(
          :map helm-gtags-mode-map
               ("C-c g a" . helm-gtags-tags-in-this-function)
               ("C-j" . helm-gtags-select)
               ("M-." . helm-gtags-dwim)
               ("M-*" . helm-gtags-pop-stack)
               ("C-c <" . helm-gtags-previous-history)
               ("C-c >" . helm-gtags-next-history))
    :diminish helm-gtags-mode)
#+END_SRC

#+RESULTS:

* Imenu List

Show imenu entries in a separate buffer on the side.

#+BEGIN_SRC emacs-lisp

  ;; imenu-list

  (use-package imenu-list
    :bind ("<f2>" . imenu-list-minor-mode)
    :config
    (setq imenu-list-focus-after-activation t)
    (setq imenu-list-auto-resize t))

#+END_SRC

* Ivy
This is a newer package which is clutter-free and atleast in that sense better than helm. But need to check the functionality. Hence, using for experimentation.

Good package but disabled until all options understood and ready to replace helm.

#+BEGIN_SRC emacs-lisp

  ;; Ivy
  (use-package ivy
    :bind(("C-c C-r" . ivy-resume)
          ("C-x C-r" . ivy-recentf))
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t) ;; not working properly
    (setq ivy-extra-directories nil) ;; do not show ../  and ./
    (setq ivy-re-builders-alist
          ;; allow input not in order
          '((t   . ivy--regex-ignore-order)))
    (custom-set-faces
     '(ivy-current-match ((t (:inherit t :italic t))))
     '(ivy-minibuffer-match-face-2 ((t (:inherit t :underline t)))))
    :diminish ivy-mode)

  (use-package swiper
    :bind("M-i" . swiper))

  (use-package counsel
    :bind(("M-x" . counsel-M-x)
          ("C-x C-f" . counsel-find-file)
          ("M-y" . counsel-yank-pop)
          ("C-? f" . counsel-describe-function)
          ("C-? v" . counsel-describe-variable)
          ("C-? i" . counsel-info-lookup-symbol)
          ("C-? u" . counsel-unicode-char)
          ("C-c g" . counsel-git)
          ("C-c j" . counsel-git-grep)
          ("C-c /" . counsel-imenu)
          ;("C-c k" . counsel-ag)
          ;("C-x l" . counsel-locate)
          ;("C-S-o" . counsel-rhythmbox)
          :map read-expression-map
          ("C-r" . counsel-expression-history)))

  ;; counsel-gtags on MELPA now
  (use-package counsel-gtags
    :config
    ;; add to c/c++
    (add-hook 'c-mode-hook 'counsel-gtags-mode)
    (add-hook 'c++-mode-hook 'counsel-gtags-mode)
    :bind (("M-." . counsel-gtags-dwim)
           ("M-*" . counsel-gtags-pop))
    :diminish 'counsel-gtags-mode)


#+END_SRC

#+RESULTS:

* Info+

#+BEGIN_SRC emacs-lisp

  ;; Info+
  (use-package info+)

#+END_SRC

* Interaction Log

#+BEGIN_SRC emacs-lisp

;; Interaction Log
(use-package interaction-log)

#+END_SRC

* Multiple Cursors

This is a cool package which allows editing mutliple lines together.

#+BEGIN_SRC emacs-lisp
  ;; mutliple cursors

  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))

  (bind-key "C-c C-SPC" 'set-rectangular-region-anchor)

#+END_SRC

* Expand Region

#+BEGIN_SRC emacs-lisp
  ;; expand region

  (use-package expand-region
    :bind (("C-=" . er/expand-region)
           ("C-c = -" . er/contract-region)
           ("C-c = =" . er/mark-symbol)
           ("C-c = f" . er/mark-defun)))

#+END_SRC

* IBuffer

This needs to be configured properly.

#+BEGIN_SRC emacs-lisp
  ;; ibuffer

  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer-other-window)
    :config
    (progn
      (setq ibuffer-saved-filter-groups
            (quote (("mygroups"
                     ("dired" (mode . dired-mode))
                     ("perl" (mode . cperl-mode))
                     ("erc" (mode . erc-mode))
                     ("planner" (or
                                 (name . "^\\*Calendar\\*$")
                                 (name . "^diary$")
                                 (mode . muse-mode)))
                     ("emacs" (or
                               (name . "^\\*scratch\\*$")
                               (name . "^\\*Messages\\*$")))
                     ("gnus" (or
                              (mode . message-mode)
                              (mode . bbdb-mode)
                              (mode . mail-mode)
                              (mode . gnus-group-mode)
                              (mode . gnus-summary-mode)
                              (mode . gnus-article-mode)
                              (name . "^\\.bbdb$")
                              (name . "^\\.newsrc-dribble")))))))
      (setq ibuffer-expert t)
      (add-hook 'ibuffer-mode-hook
                '(lambda ()
                   (ibuffer-auto-mode 1)
                   (ibuffer-switch-to-saved-filter-groups "mygroups")))))


  ;(setq ibuffer-default-sorting-mode 'major-mode)
  ;(setq ibuffer-show-empty-filter-groups nil)
#+END_SRC

* Avy

Avy is a newer version of ace-jump-mode and provides far more
features. Hence, upgrading to this. Some resources:
+ [[https://github.com/abo-abo/avy][avy-mode]]
+ [[http://emacsredux.com/blog/2015/07/19/ace-jump-mode-is-dead-long-live-avy/][Avy on redux]]

Binding M-g g to avy-goto-line instead of normal goto-line.

Also, this is great because it works on all visible buffers, so no
need to keep switching bufers.

#+BEGIN_SRC emacs-lisp
  ;; Setup avy

  (use-package avy
    :bind (("C-;" . avy-goto-word-1)
           ("C-c ;" . avy-goto-char)
           ("M-g g" . avy-goto-line)))
#+END_SRC

Another package in the same league is ace-window. As per the
recommendation, mapping it to M-p which is not mapped by default to
any function. See [[https://github.com/abo-abo/ace-window][ace-window]] for other features like deleting a
window. Use 'x' and then window-number for this.

#+BEGIN_SRC emacs-lisp
  ;; ace-window

  (use-package ace-window
    :bind (("M-O" . ace-window)
           ("C-o" . ace-window)))

#+END_SRC

* Auto Completion

** Company Mode

This has great many backends for various programming languages and
works well with gtags, libclang etc. Even elpy mode works with this.
[[http://company-mode.github.io/][company-mode]]

Also a useful tip [[http://emacs.stackexchange.com/questions/5664/shell-bash-completion-window][here]] to complete shell using company instead of helm
(which could be bit irritating as it opens a small buffer below).

If clang is available, could also use company-clang but mostly
company-gtags should do.

#+BEGIN_SRC emacs-lisp
  ;; Company mode


  (use-package company
    :disabled t
    :bind (("C-c C-y" . company-yasnippet)
           :map company-mode-map
           (("C-j" . company-complete-selection)))
    :config
    (setq company-idle-delay 0.2)
    (setq company-minimum-prefix-length 2)
    (global-company-mode +1)
    (add-hook 'c++-mode-hook '(lambda()
                                (setq-local company-backends '(company-capf
                                                               company-clang
                                                               company-gtags
                                                               company-dabbrev-code
                                                               company-keywords
                                                               company-files))))
    (add-hook 'elisp-mode-hook '(lambda()
                                  (setq-local company-backends '(company-capf
                                                                 company-elisp
                                                                 company-dabbrev-code
                                                                 company-keywords
                                                                 company-files))))
    (add-hook 'python-mode-hook '(lambda()
                                   (setq-local company-backends '(company-ropemacs
                                                                  company-dabbrev-code
                                                                  company-keywords
                                                                  company-files))))
    (add-hook 'shell-mode-hook '(lambda()
                                  (setq-local company-backends '(company-capf
                                                                 company-shell
                                                                 company-dabbrev-code
                                                                 company-keywords
                                                                 company-files)))))

  (use-package company-c-headers
    :disabled t
    :config
    (add-to-list 'company-c-headers-path-system "/usr/include/c++/4.2.1/")
    (add-to-list 'company-backends 'company-c-headers))

  ;; Creates problems with yas-expand, we always use company-yasnippet C-c C-y
  ;(define-key prog-mode-map (kbd "TAB") #'company-complete)

#+END_SRC

#+RESULTS:

Also enable flx for company.

#+BEGIN_SRC emacs-lisp

  (use-package company-flx
    :disabled t
    :config
    (add-hook elisp-mode-hook '(lambda()
                                 (company-flx-mode +1))))

#+END_SRC

** Auto complete

Disabling this and will use company mode.

#+BEGIN_SRC emacs-lisp
  ;; auto-complete

  (use-package auto-complete
    :config
    (setq ac-use-menu-map t)
    (add-to-list 'ac-dictionary-directories 
                 (expand-file-name "~/.emacs.d/elpa/auto-complete-20150618.1949/dict"))
    (setq ac-comphist-file
          (expand-file-name "~/.emacs.d/ac-comphist.dat"))
    (ac-config-default)                                      
    (ac-flyspell-workaround) ; auto-complete does not work with flyspell
    (add-to-list 'ac-modes 'shell-mode)
    :diminish 'auto-complete-mode)

#+END_SRC

** FASD

This looks to be a good and fast way to work on Shell and has an emacs
package also. Look at it sometime.

**** FASD
[[https://gitlab.com/emacs-stuff/fasd-shell][fasd-shell]]

* Yasnippet

#+BEGIN_SRC emacs-lisp
  ;; yasnippets

  (use-package yasnippet
    :config
    (yas-reload-all)
    ;(define-key yas-minor-mode-map [(tab)] nil)
    ;(define-key yas-minor-mode-map (kbd "TAB") nil)
    :diminish yas-minor-mode)

#+END_SRC

* YCMD

#+BEGIN_SRC emacs-lisp

  (if nil
      (progn
        (defun ycmd-setup-completion-at-point-function ()
          "Setup `completion-at-point-functions' for `ycmd-mode'."
          (add-hook 'completion-at-point-functions
                    #'ycmd-complete-at-point nil :local))

        (use-package ycmd
          :init
          (set-variable 'ycmd-server-command '("/Users/pmachwe/anaconda/bin/python3" "/Users/pmachwe/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd"))
          :config
          (add-hook 'c++-mode-hook 'ycmd-mode)
          (add-hook 'ycmd-mode #'ycmd-setup-completion-at-point-function))

        (use-package company-ycmd
          :config
          (company-ycmd-setup))

        (use-package flycheck-ycmd
          :config
          (flycheck-ycmd-setup)
          
          ;; Make sure the flycheck cache sees the parse results
          (add-hook 'ycmd-file-parse-result-hook 'flycheck-ycmd--cache-parse-results)

          ;; Add the ycmd checker to the list of available checkers
          (add-to-list 'flycheck-checkers 'ycmd)

          (when (not (display-graphic-p))
            (setq flycheck-indication-mode nil)))))

#+END_SRC

#+RESULTS:

* Irony Mode

#+BEGIN_SRC emacs-lisp

  ;; irony-mode
  (use-package irony
    :disabled t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)

    ;; replace the `completion-at-point' and `complete-symbol' bindings in
    ;; irony-mode's buffers by irony-mode's function
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

#+END_SRC

* RTags

Experimental, disabled for now.

#+BEGIN_SRC emacs-lisp

  (use-package rtags
    :disabled t
    :config
    (add-to-list 'company-backends 'company-rtags)
    (setq rtags-autostart-diagnostics t)
    (rtags-diagnostics)
    (setq rtags-completions-enabled t)
    (push 'company-rtags 'company-backends)
    (define-key c-mode-base-map (kbd "<C-tab>") (function company-complete))
    (add-hook 'c-mode-common-hook 'rtags-start-process-unless-running)
    (add-hook 'c++-mode-common-hook 'rtags-start-process-unless-running))

  (use-package flycheck-rtags
    :disabled t)
#+END_SRC

#+RESULTS:

* SmartParens

Parenthesis matching.

#+BEGIN_SRC emacs-lisp
  ;; Smart Parens

  (use-package smartparens
    :init
    (progn
      (smartparens-mode 1)
      (add-hook 'prog-mode-hook #'smartparens-mode))
    :diminish smartparens-mode)

  ;; when you press RET, the curly braces automatically
  ;; add another newline
  (sp-with-modes '(c-mode c++-mode)
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
    (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                              ("* ||\n[i]" "RET"))))
#+END_SRC

* Rainbow Delimiters

Nice way to highlight delimiters especially for LISP.

#+BEGIN_SRC emacs-lisp

  ;; rainbow delimiters
  (use-package rainbow-delimiters
    :config
    (add-hook 'emacs-lisp-mode-hook
              (lambda()
                (rainbow-delimiters-mode 1))))
#+END_SRC

* Show Matching Parentheses

Taken from [[http://emacsredux.com/blog/2013/04/01/highlight-matching-parentheses/][here]].

#+BEGIN_SRC emacs-lisp

  (require 'paren)
  (setq show-paren-style 'parenthesis)
  (show-paren-mode +1)

#+END_SRC

* Flycheck

On the fly syntax checking for most languages.

#+BEGIN_SRC emacs-lisp
  ;; Flycheck

  ;; Also set to not mess up the standard navigation which is
  ;; used to navigate compilation errors
  (use-package flycheck
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    (setq flycheck-standard-error-navigation nil)
    :diminish flycheck-mode)

#+END_SRC

* Directory Visualizer
** Sr-speedbar

This is a cool way to quickly visualize open buffers or files in the
directory. Also, it could extend to show functions in many
progaramming languages.

#+BEGIN_SRC emacs-lisp
  ;; sr-speedbar

  (use-package sr-speedbar
    :disabled t
    :bind ("<f1>" . sr-speedbar-toggle)
    :config
    (progn
      (speedbar-add-supported-extension ".c")
     (add-to-list 'speedbar-fetch-etags-parse-list
              '("\\.c" . speedbar-parse-c-or-c++tag))))
#+END_SRC

** Neotree

Trying out neotree.

#+BEGIN_SRC emacs-lisp

  ;; neotree
  (use-package neotree
    :bind ("<f1>" . neotree-toggle))

#+END_SRC

* God Mode

Handy while browsing stuff (something like Vim's command mode).

#+BEGIN_SRC emacs-lisp
  ;; God Mode

  (use-package god-mode
    :disabled t
    :bind ("<f2>" . god-mode))
#+END_SRC

* Visual Regexp

The packages allows visual feedback while replacing some regular
expression. The package with steroids allows python style regular
expressions. It also allow expressions to insert values (say SNo to
items in increasing order).

NOTE - Disabling this as this is very slow to search.

#+BEGIN_SRC emacs-lisp
  ;; visual regexp

  (use-package visual-regexp
    :disabled t)

  (use-package visual-regexp-steroids
    :disabled t
    :bind (("C-c r" . vr/replace)
           ("C-c q" . vr/query-replace)
           ("C-c m" . vr/mc-mark)           ; if you use multiple-cursors
           ("C-s" . vr/isearch-forward)     ; C-M-s
           ("C-r" . vr/isearch-backward)))  ; C-M-r

#+END_SRC

#+RESULTS:
: vr/isearch-backward

* Anzu

#+BEGIN_SRC emacs-lisp

  ;; Anzu
  (use-package anzu
    :disabled t
    :init
    (global-anzu-mode +1)
    (global-set-key [remap query-replace] 'anzu-query-replace)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp))

#+END_SRC

* Which Key

Nice suggestions for key completions in a separate buffer.

#+BEGIN_SRC emacs-lisp

  ;; which-key
  (use-package which-key
    :config
    (which-key-mode))

#+END_SRC

* Magit

Magit is the best package to work with Git. 

#+BEGIN_SRC emacs-lisp
  ;; Magit

  (use-package magit
    :bind ("<f6>" . magit-status))

#+END_SRC

* Perforce

Used at work.

#+BEGIN_SRC emacs-lisp
  ;; Perforce

  (use-package p4)

#+END_SRC

* Highlight Diff
A visual aid to view the differences from the repository.

#+BEGIN_SRC emacs-lisp
  ;; highlight differences from repo

  (use-package diff-hl
    :config
    (diff-hl-mode 1)
    (diff-hl-dired-mode 1)
    (diff-hl-flydiff-mode 1))
#+END_SRC

* Workgroups
Session manager for Emacs. Experimental for now.

#+BEGIN_SRC emacs-lisp
  ;; Emacs session manager

  (use-package workgroups2
    :disabled t
    :config
    (workgroups-mode 1))

#+END_SRC

* Golden Ratio

#+BEGIN_SRC emacs-lisp

  ;; golden ratio
  (use-package golden-ratio
    :disabled t
    :config
    (golden-ratio-mode 1)
    (setq golden-ratio-auto-scale t))

#+END_SRC

* Undo Tree

#+BEGIN_SRC emacs-lisp

  ;; undo-tree
  (use-package undo-tree
    :init
    (setq global-undo-tree-mode t)
    (setq undo-tree-visualizer-diff t))

#+END_SRC

#+RESULTS:

* Popwin

#+BEGIN_SRC emacs-lisp

  ;; Popwin
  ;; bind gets into problem, hence global-set-key
  ;; (probably because popwin:keymap does not require ')
  (use-package popwin
    :config
    (popwin-mode 1)
    (push '(compilation-mode :noselect t :tail t) popwin:special-display-config)
    (push '("\*P4 Opened.*" :regexp t) popwin:special-display-config)
    (global-set-key (kbd "C-. p") popwin:keymap))

#+END_SRC

* Silver Searcher

#+BEGIN_SRC emacs-lisp

  ;; ag
  (use-package ag)

#+END_SRC

* Projectile

Projectile for working under a project.

#+BEGIN_SRC emacs-lisp

  ;; projectile
  (use-package projectile
    :config
    (projectile-mode 1))

  (use-package counsel-projectile
    :config
    (counsel-projectile-on))

#+END_SRC

* Quelpa Setup

Quelpa helps loading packages directly from github and sources other than MELPA et al.

#+BEGIN_SRC emacs-lisp

  ;; quelpa
  (use-package quelpa
    :init
    ;; Do not upgrade during init
    (setq quelpa-self-upgrade-p nil)
    (setq quelpa-update-melpa-p nil)
    (setq quelpa-checkout-melpa-p nil)
    :config
    (unless (require 'quelpa nil t)
      (with-temp-buffer
        (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
        (eval-buffer))))

#+END_SRC

* Personal Packages

These are the packages I have written and available only on Github.

** Shutil

#+BEGIN_SRC emacs-lisp

  ;; shutil
  (quelpa '(shutil :repo "pmachwe/emacs-shutil" :fetcher github))

  ;; shutil shortcuts
  (when (require 'shutil nil 'noerror)
    (bind-key "<f5>" 'shutil-get-new-shell)
    (bind-key "C-c s b" 'shutil-switch-to-buffer)
    (bind-key "C-c s n" 'shutil-get-new-shell)
    (bind-key "C-c s |" 'shutil-split-vertically))

#+END_SRC

** Quick Search

#+BEGIN_SRC emacs-lisp

  ;; quick-search
  (quelpa '(quick-search :repo "pmachwe/quick-search" :fetcher github))

#+END_SRC

* DTRT Indent

#+BEGIN_SRC emacs-lisp

  ;; dtrt-indent
  (use-package dtrt-indent
    :config
    (dtrt-indent-mode 1)
    (setq dtrt-indent-verbosity 0)
    :diminish 'dtrt-indent-mode)


#+END_SRC

#+RESULTS:
: t

* Shell Mode

Customize shell-mode.

#+BEGIN_SRC emacs-lisp

  ;; shell-mode

  (defun my/shell-mode-hooks ()
    "Configure shell-mode."
    (define-key shell-mode-map (kbd "C-j") 'comint-send-input))

  (add-hook 'shell-mode-hook 'my/shell-mode-hooks)

#+END_SRC

#+RESULTS:

* CMake Mode

Enable special mode for cmake files.

#+BEGIN_SRC emacs-lisp

  ;; cmake mode
  (use-package cmake-mode)

#+END_SRC
* Hippie Expand

#+BEGIN_SRC emacs-lisp

  ;; hippie-expand
  (use-package hippie-exp
    :bind ("M-/" . hippie-expand)
    :init
    (setq hippie-expand-try-functions-list
          '(try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-complete-file-name-partially
            try-complete-file-name
            try-expand-all-abbrevs
            try-expand-list
            try-expand-line
            try-complete-lisp-symbol-partially
            try-complete-lisp-symbol)))

#+END_SRC


* Programming Languages
** Common Settings 

Some common settings in this section.

#+BEGIN_SRC emacs-lisp
  ;; common settings for all programming languages

  (defun my/common-prog-hooks()
    (if window-system (linum-mode 1))
    (local-set-key (kbd "RET") 'newline-and-indent)
    (subword-mode 1)
    (yas-minor-mode +1))

  ;; No tabs
  (setq-default indent-tabs-mode nil)

  ;; Allow folding of code blocks
  (add-hook 'c-mode-common-hook   'hs-minor-mode)

  ;; add to all
  (add-hook 'prog-mode-hook 'my/common-prog-hooks)

  ;; for compilation
  (setq compilation-scroll-output t)

#+END_SRC

#+RESULTS:
: t

** C

In this section, there will be specific settings for C/C++.

#+BEGIN_SRC emacs-lisp
  ;; c/c++

  (setq-default c-default-style "stroustrup"
                c-basic-offset 4)

  ;; Open .h file in cpp mode
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

  (defun my/cpp-hooks()
  ;  (ggtags-mode 1)
    (counsel-gtags-mode 1)
    (add-hook 'c++-mode-hook (lambda () 
                               (setq flycheck-gcc-language-standard "c++11")
                               (setq flycheck-clang-language-standard "c++11")))
    (my/common-prog-hooks))

  ;(add-hook 'c++-mode-hook 'my/cpp-hooks)
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                (my/cpp-hooks))))

  ;; TODO Setup google style check
#+END_SRC

Adding this to not reconfirm the /compilation/ command.

#+BEGIN_SRC emacs-lisp
  (bind-key  "<f7>" (lambda ()
                      (interactive)
                      (setq-local compilation-read-command nil)
                      (call-interactively 'compile)))
#+END_SRC

** Python

In this section, there will be specific settings for python. Mostly
related to elpy.

#+BEGIN_SRC emacs-lisp
  ;; python settings

  (use-package elpy)

  ;(use-package highlight-indentation-mode)

  ;(use-package fci)

  (defun my/python-hooks()
    (my/common-prog-hooks)
    (elpy-enable)
    (elpy-mode 1))
   ; (highlight-indentation-mode)
    ;(fci-mode 1))

  (setq-default python-indent-offset 4)

  (add-hook 'python-mode-hook 'my/python-hooks)

#+END_SRC

** Elisp

Some settings for Elisp.

#+BEGIN_SRC emacs-lisp
  ;; Setup smartparens keybindings and use the stricter mode
  (add-hook 'emacs-lisp-mode-hook '(lambda ()
                                     (require 'smartparens-config)
                                     (sp-use-smartparens-bindings)
                                     (smartparens-strict-mode)
                                     (prettify-symbols-mode)))
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  ;; Haskell Mode
  (defun my/haskell-hooks()
    (my/common-prog-hooks)
    (interactive-haskell-mode))

  (use-package haskell-mode
    :defer t
    :config
    (add-hook 'haskell-mode-hook 'my/haskell-hooks))

  ;; Use Hasklig instead of FIRA when required
  (defun pm/set-hasklig-codes ()
    (interactive)
    (pm/set-fira-codes)
    (set-default-font "Hasklig 13"))
#+END_SRC

#+RESULTS:
: pm/set-hasklig-codes

* FIRA

FIRA fonts provide litigatures for many unicode like symbols and these
look better than unicode because these are also 2 characters wide.

Not enabling for all but providing a function to enable it as it
creates problems with org-mode and Emacs hangs (atleast on Mac). Here
are some pointers for the settings below:
+ [[https://github.com/tonsky/FiraCode/wiki/Setting-up-Emacs][Emacs Workaround]]
+ [[https://github.com/tonsky/FiraCode][FIRA Codes]]

#+BEGIN_SRC emacs-lisp
  ;; FIRA codes

  ;; This is a better font as it is based on Source Code Pro
  ;; but it only has special symbols used in Haskell.

  ;; (set-default-font "Hasklig 12"))

  (defun pm/set-fira-codes()
    (interactive)
      (when (window-system)
        (set-default-font "Fira Code 13"))
      (let ((alist '((33 . ".\\(?:\\(?:==\\)\\|[!=]\\)")
                     (35 . ".\\(?:[(?[_{]\\)")
                     (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                     (42 . ".\\(?:\\(?:\\*\\*\\)\\|[*/]\\)")
                     (43 . ".\\(?:\\(?:\\+\\+\\)\\|\\+\\)")
                     (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                     (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=]\\)")
                     (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                     (58 . ".\\(?:[:=]\\)")
                     (59 . ".\\(?:;\\)")
                     (60 . ".\\(?:\\(?:!--\\)\\|\\(?:\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[/<=>|-]\\)")
                     (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                     (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                     (63 . ".\\(?:[:=?]\\)")
                     (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                     (94 . ".\\(?:=\\)")
                     (123 . ".\\(?:-\\)")
                     (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                     (126 . ".\\(?:[=@~-]\\)")
                     )
                   ))
        (dolist (char-regexp alist)
          (set-char-table-range composition-function-table (car char-regexp)
                                `([,(cdr char-regexp) 0 font-shape-gstring])))))

#+END_SRC

* Key chords

Key chords look promising. Try these out.

#+BEGIN_SRC emacs-lisp
  ;; key-chords
  ;; using \ which is similar to Leader key in vim
  ;; which is on right so the second key is on left
  (use-package key-chord
    :config
    (progn
      (key-chord-mode 1)
      (key-chord-define-global "\\w" 'avy-goto-word-1)
      (key-chord-define-global "\\a" 'ace-window)
      (key-chord-define-global "\\s" 'isearch-forward-symbol-at-point)
      (key-chord-define-global "\\b" 'ido-switch-buffer)
      (key-chord-define-global "\\f" 'ido-find-file)
      (key-chord-define-global "\\g" 'keyboard-quit)
      (key-chord-define-global "\\x" 'counsel-M-x)
      (key-chord-define-global "\\z" 'undo)
      (key-chord-define-global "\'w" 'avy-goto-word-1)
      (key-chord-define-global "\'a" 'ace-window)
      (key-chord-define-global "\'s" 'isearch-forward-symbol-at-point)
      (key-chord-define-global "\'b" 'ido-switch-buffer)
      (key-chord-define-global "\'f" 'ido-find-file)
      (key-chord-define-global "\'g" 'keyboard-quit)
      (key-chord-define-global "\'x" 'counsel-M-x)
      (key-chord-define-global "\'z" 'undo)
      (key-chord-define-global "\[a" 'beginning-of-defun)
      (key-chord-define-global "\[e" 'end-of-defun)))
#+END_SRC

* Beacon

#+BEGIN_SRC emacs-lisp

  ;; beacon for better viewing of cursor
  (use-package beacon
    :disabled t
    :config
    (beacon-mode 1))

#+END_SRC

* Eyebrowse

A simple package to create/switch between window configurations. There are others like workgroups2 and perspective but this
one seems to be the easiest to configure out of the box. Here is the link: [[https://github.com/wasamasa/eyebrowse][eyebrowse]].

#+BEGIN_SRC emacs-lisp

  ;; eyebrowse

  (use-package eyebrowse
    :init
    (eyebrowse-mode t)
    :bind
    ("C-c C-w C-w" . eyebrowse-last-window-config))

#+END_SRC

* Ediff

Some sane defaults for Ediff mode. Taken from [[http://oremacs.com/2015/01/17/setting-up-ediff/][here]].

#+BEGIN_SRC emacs-lisp

  ;; Ediff defaults
  (defmacro csetq (variable value)
    `(funcall (or (get ',variable 'custom-set)
                  'set-default)
              ',variable ,value))

  (csetq ediff-window-setup-function 'ediff-setup-windows-plain)
  (csetq ediff-split-window-function 'split-window-horizontally)
  (csetq ediff-diff-options "-w")
  (add-hook 'ediff-after-quit-hook-internal 'winner-undo)

#+END_SRC

* OS Specific

** Windows
On Windows, there a few annoyances that happen with the default
installation. The Windows installation is done from
[[http://emacsbinw64.sourceforge.net/][Win Install]].
Need to have this at the top to set appropriate environment.

+ Console window opens up. Fix it by retargeting the shortcut to
  /runemacs.exe/. More on
  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-Startup.html][Windows Startup]].
+ Use the shortcut properties to change the start folder or set the
  variable =default-directory=.
+ Make sure the /HOME/ environment variable is set before starting up
  Emacs for the first time, otherwise it creates .emacs in a obscure
  location (on Win7: C:/Users/<login>/AppData/Roaming).
+ If /HOME/ is properly set, then /Dropbox/ will also be there, so
  MobileOrg should work fine.
+ Even on Win7, create a folder /org/ in /HOME/ folder so that
  org-mode works fine.

#+BEGIN_SRC emacs-lisp
  ;; Windows specific settings

  (if (or (string-equal system-type "windows-nt")
          (string-equal system-type "ms-dos"))
      (progn
        (setq default-directory (getenv "HOME"))
        ; Special settings for Emacs to work on Windows smoothly
        (remove-hook 'find-file-hooks 'vc-find-file-hook)
        (setq w32-get-true-file-attributes nil)))
  
#+END_SRC

** Mac

When connecting to Mac through VNC, the Meta key does not get mapped correctly. The following function rectifies the issue.

#+BEGIN_SRC emacs-lisp

  ;; Taken from:
  ;; http://ergoemacs.org/emacs/emacs_hyper_super_keys.html
  ;; Mapping Hyper key causes problems, hence commented

  (defun my/mac-vnc-setup()
    (interactive)
    (setq mac-command-modifier 'meta) ; make cmd key do Meta
    (setq mac-option-modifier 'super) ; make opt key do Super
    (setq mac-control-modifier 'control)) ; make Control key do Control
    ;(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper

#+END_SRC

* Custom Shortcuts

The common commands are mapped to single key shortcuts.

Note: Some of the keybindings of the form C-<special char>
(e.g. C-.). Apparantly, the terminal emulators pass the ASCII value of
the character minus 64. For some special character this leads to
negative values and hence the terminal emulators do not understand
these.

Hence, converting such keybindings to the form C-c <special char> or
M-<char>.

Note: A good suggestion is to create a minor-mode and change create
the custom keybindings in the minor mode. This should help avoid any
clashes and also all the custom keybindings could be turned off in one
go with the minor mode. This idea is taken from [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][here]].

Another good suggestion is to use C-. as a prefix (in the same way as
C-c and define many more keybindings). These might not work in some
terminals. Some other prefixes that
could be used are C-m which is also bound to
newline-and-indent. Others are C-h <j|o|q|u|x|y|z> as these
keybindings are unused. Using C-. for now.

Using "h" for help, "c" for personal configurations.

Some other free combinations are: C-', C-".

#+BEGIN_SRC emacs-lisp

  ;; use bind-key to bind personal keys

  (bind-keys*
   ("<f5>" . shell)
   ("S-<f5>" . eshell)
   ("C-c M-!" . eshell-command))

  ;; Search
  (bind-keys*
   ("C-s" . isearch-forward-regexp)
   ("C-r" . isearch-backward-regexp)
   ("C-M-s" . isearch-forward)
   ("C-M-r" . isearch-backward)
   ("C-," . isearch-forward-symbol-at-point)
   ("C-c ," . highlight-symbol-at-point)
   ("C-c C-," . unhighlight-regexp))

  ;; Buffer related
  (bind-keys*
   ("M-j" . counsel-find-file)
   ("M-J" . ido-find-file-other-window)
   ("M-o" . ivy-switch-buffer)
   ("M-k" . kill-buffer-and-window)
   ("M-K" . kill-buffer))

  ;; Avy - again due to org-mode pollution
  (bind-keys*
   ("C-;" . avy-goto-word-1)
   ("C-c ;" . avy-goto-char)
   ("M-g g" . avy-goto-line))

  ;; Free up C-h for backspace
  (bind-key* "C-?" help-map)

  ;; Use C-h for backspace as it is more ergonomic
  (bind-keys*
   ("C-h" . backward-delete-char)
   ("M-h" . backward-kill-word))

  ;; Window movement
  (bind-keys*
   ("C-x <up>" . windmove-up)
   ("C-x <down>" . windmove-down)
   ("C-x <left>" . windmove-left)
   ("C-x <right>" . windmove-right))

  ;; Window Killing
  ;; C-x 1 and C-x 0 are a bit cumbersome
  (bind-keys*
   ("C-x ," . delete-other-windows)
   ("C-x ." . delete-window))

  ;; Switch windows quickly
  ;(bind-keys*
   ;("C-. C-." . ace-window))

  (bind-keys*
   ("C-. h v" . view-echo-area-messages)
   ("C-. h c" . (lambda() (switch-to-buffer "*Compilation*"))))

  ;; Simple utils
  (defvar emacs-help-dir "~/.emacs.d/help/"
    "Save help files here.")

  (bind-keys*
   ("C-. h S" . (lambda()
                  (interactive)
                  (find-file-other-window
                   (concat emacs-help-dir "smartparens.txt"))))
   ("C-. h M" . (lambda()
                  (interactive)
                  (ind-file-other-window
                   (concat emacs-help-dir "magit.org"))))
   ("C-. h C" . (lambda()
                  (interactive)
                  (find-file-other-window
                   (concat user-emacs-directory "config.org"))))
   ("C-. c f" . (lambda(font size)
                  (interactive "sFont: \nsSize: ")
                  (set-default-font (concat font " " size)))))


#+END_SRC

#+RESULTS:
| lambda | (font size) | (interactive sFont: \nsSize: ) | (set-default-font (concat font   size)) |

* Some Useful Tips

** Word Navigation

+ The * operation of vim could be achieved by
  =isearch-forward-symbol-at-point= which is bound to *M-s .* and
  later on normal C-s and C-r should do.
+ Also the /symbol/ igores the '_' or '-' in the word which is really
  cool.
+ There are navigation commands =forward-symbol= which jumps to the
  next whitespace. There is no =backward-symbol= and hence a negative
  prefix argument needs to be given. Interestingly, there are
  shortcuts that achieve both forward and backward movements C-M-f and
  C-M-b which basically are =forward-sexp= and =backward-sexp= which
  work the same way for text.
+ Found some modes /subword/ and /superword/ in Emacs 24.4 which will
  convert all word related commands to symbols and vice-versa.
+ Look at this sometime: [[http://www.emacswiki.org/emacs/FastNav][FastNav]].
+ Tips with isearch: [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Isearch-Yank.html][isearch-yank]].

|----------+----------------------------------------------------|
| Shortcut | Binding                                            |
|----------+----------------------------------------------------|
| M s .    | * of vim, ignores symbols like - or _              |
| C-M-f    | forward-sexp                                       |
| C-M-b    | backward-sexp                                      |
| M-a      | Move start a sentence                              |
| M-e      | Move end of sentence                               |
| C-M-a    | Start of para/function                             |
| C-M-e    | End of para/function                               |
| M-m      | Reach start of indented statement                  |
| C-M-SPC  | Start marking from current position                |
|----------+----------------------------------------------------|
| C-S-f    | Adding Shift to movement commands starts selecting |
|----------+----------------------------------------------------|

** File Navigation

+ =find-file-other-window=: Bound to C-x 4 f. Have mapped this to
  "M-J" as this is very useful.
+ M-PgUp and M-PgDn move the other buffer.
+ C-x C-SPC will go to previous mark

** Kill and Yank

Found a good function [[http://emacs.stackexchange.com/questions/2347/kill-or-copy-current-line-with-minimal-keystrokes][here]] where the normal C-w and M-w will kill or
copy the whole line if nothing is selected.

#+BEGIN_SRC emacs-lisp
  ;; Kill/Copy full line if nothing is selected

  (defun slick-cut (beg end)
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (list (line-beginning-position) (line-beginning-position 2)))))

  (advice-add 'kill-region :before #'slick-cut)

  (defun slick-copy (beg end)
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position) (line-beginning-position 2)))))

  (advice-add 'kill-ring-save :before #'slick-copy)

#+END_SRC

** Helm

*** Copy from menu

"C-c C-y" will copy the menu item currently highlighted in helm. Very
useful.

** General Tips

*** Get the font details

"Place your cursor on the point that you want to change the font, and
type C-u C-x =, and that will tell you (among other things) the name
of the fonts at that point."

Taken from [[http://stackoverflow.com/questions/26290924/fontify-r-code-blocks-in-org-mode-8][stackoverflow]].
* Resources

Listing some great resources about setting up Emacs.

+ [[http://tuhdo.github.io/c-ide.html][Emacs as C IDE]]
+ [[http://daemianmack.com/magit-cheatsheet.html][Magit CheatSheet]]

* Package to look into
*** abbrev-mode
*** google-this
*** lookup
Some elisp functions to facilitate lookup of queries to various sites
like Wikipedia, Google etc.
[[http://ergoemacs.org/emacs/emacs_lookup_ref.html][lookup-setup]]
*** edit-server
[[http://www.emacswiki.org/emacs/Edit_with_Emacs][edit-server]]
+ Needs edit-server-htmlize to work with GMail.
+ Also check the markdown mode.

* Abbrevs for C++

#+BEGIN_SRC emacs-lisp

#+END_SRC
