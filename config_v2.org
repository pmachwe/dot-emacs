#+TITLE: Emacs Configuration
#+AUTHOR: Parikshit Machwe
#+STARTUP: outline
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./style.css">
#+OPTIONS: toc:2

* Introduction

The previous configuration was developed a couple of years back but in
the meantime a lot of packages have been updated and new replacements
have been created. Hence, this is an attempt to clean-up the previous
configuration.

The overall setup still remains the same. It uses the Jon Weigley's ubiqutous
[[https://github.com/jwiegley/use-package][use-package]] used all around by the Emacs community. Also this uses
/org-babel/ mode which is a fantastic package promoting [[https://www.youtube.com/watch?v=dljNabciEGg][Literate
Programming]].


* Bootstrap

Setup package repositories and =use-package=. Also, setup key-chords
along with key-bindings for the heavily used packages. Upgrading, to
=delight= from =diminish= package as =delight= provides more options
and is also integrated with =use-package=.

#+BEGIN_SRC emacs-lisp

  ;; (require 'package)
  ;; (setq package-archives '(("gnu"   . "http://elpa.gnu.org/packages/")
  ;;                          ("melpa" . "http://melpa.org/packages/")
  ;;                          ("org"   . "http://orgmode.org/elpa/")))
  ;; (package-initialize)

  ;; (unless (package-installed-p 'use-package)
  ;;   (package-refresh-contents)
  ;;   (package-install 'use-package)
  ;;   (package-install 'bind-key))

  ;; (eval-when-compile
  ;;   (require 'use-package)
  ;;   (require 'bind-key))

  ;; ;(use-package-chords)
  ;; ;(setq use-package-always-ensure t)
  (setq package-check-signature nil)

  (use-package delight)

#+END_SRC


* Basics

These are certain basic settings to reduce clutter and setup some
simple defaults.

+ The most notable is the =winner-mode= which does undo/redo for
  windows config are:

|-------------+-------------|
| Key binding | Function    |
|-------------+-------------|
| C-<left>    | winner-undo |
| C-<right>   | winner-redo |
|-------------+-------------|

#+BEGIN_SRC emacs-lisp

  (use-package emacs
    :config
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1)

    (setq inhibit-startup-message t)
    (setq initial-scratch-message "")

    (setq custom-file (concat user-emacs-directory "/custom.el"))
    (load custom-file 'noerror)

    ;; Keep all backup and auto-save files in one directory
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
    (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
    (setq delete-old-versions t
          kept-new-versions 6
          kept-old-versions 2
          version-control t)

    ;; UTF-8 please
    (setq locale-coding-system 'utf-8)   ; pretty
    (set-terminal-coding-system 'utf-8)  ; pretty
    (set-keyboard-coding-system 'utf-8)  ; pretty
    (set-selection-coding-system 'utf-8) ; please
    (prefer-coding-system 'utf-8)        ; with sugar on top

    ;; Turn off the blinking cursor
    (blink-cursor-mode -1)

    (setq-default indent-tabs-mode nil)
    (setq-default indicate-empty-lines t)

    ;; delete the region when typing, just like as we expect nowadays.
    (delete-selection-mode t)

    ;; show time
    (display-time)

    ;; winner mode to undo/redo window configurations
    (winner-mode 1)

    ;; always show the function
    (which-function-mode 1)

    ;; no bells please
    (defun my-bell-func()) ;; empty
    (setq ring-bell-function 'my-bell-func)
    (setq visible-bell nil)

    ;; http://endlessparentheses.com/faster-pop-to-mark-command.html
    ;; Go up last positions using C-u C-SPC C-SPC
    ;; instead of C-u C-SPC C-u C-SPC
    (setq set-mark-command-repeat-pop t)

    ;; If same marks are saved in the ring, pop out the same ones
    (defun my/multi-pop-to-mark (orig-fun &rest args)
      "Call ORIG-FUN until the cursor moves.
    Try the repeated popping up to 10 times."
      (let ((p (point)))
        (dotimes (i 10)
          (when (= p (point))
            (apply orig-fun args)))))

    (advice-add 'pop-to-mark-command :around
                #'my/multi-pop-to-mark))

#+END_SRC


* Completion Frontend

I had started with the inbuilt *Ido* which in itself is fantastic,
tried on *Helm* for a bit but it was a bit heavy on resources, took
a bit of time starting up and hence moved to *Ivy* which practically
is a newer version of *Ido* and provides a nice set of features.

There are a few good sorting extension which proritize candidates
based on usage frequency among others (like: Smex, Amx). I have
recently found prescient-mode which is being used here.

Also, adding the counsel frontend for GNU global and also setting up
for the *Imenu* mode.

Note from the [[https://oremacs.com/swiper/#ivy--regex-plus][manual]].

#+BEGIN_QUOTE

Ivy supports regexp negation with "!". For example, "define key ! ivy quit"
first selects everything matching "define.*key", then removes everything matching
 "ivy", and finally removes everything matching "quit". 
What remains is the final result set of the negation regexp.

Since Ivy treats minibuffer input as a regexp, the standard regexp identifiers work:
 "^", "$", "\b" or "[a-z]". The exceptions are spaces, which translate to ".*", and
 "!" that signal the beginning of a negation group.

#+END_QUOTE

Some useful keybindings when in ivy minibuffer.

|-------------+-------------------------+----------------------------------------------------------------------------------------------------|
| Keybindings | Function                | Comment                                                                                            |
|-------------+-------------------------+----------------------------------------------------------------------------------------------------|
| M-o         | ivy-dispatching-done    | Presents a set of actions on given selection.                                                      |
| C-M-m       | ivy-call                | Completes action without closing minibuffer. Use when going through description of many functions. |
| M-i         | ivy-insert-current      | ??                                                                                                 |
| M-j         | ivy-yank-work           | Yanks the current sub-word at point.                                                               |
| S-SPC       | ivy-restrict-to-matches | Reduce candidates to current selection and can continue.                                           |
| M-w         | ivy-kill-ring-save      | Copy the current selection to kill-ring.                                                           |
| C-c C-o     | ivy-occur               | Saves the current candidates to a new buffer and exits completion.                                 |
|-------------+-------------------------+----------------------------------------------------------------------------------------------------|

*TODO*: Setup ivy-actions to specific commands.

#+BEGIN_SRC emacs-lisp
  ;; recentf
  (use-package recentf
    :config
    (recentf-mode t)
    (setq recentf-max-saved-items 50))

  ;; Ivy
  (use-package ivy
    :demand t
    :bind(("C-c C-r" . ivy-resume)
          ("C-x C-r" . ivy-recentf)
          ("C-c <down>" . ivy-push-view)
          ("C-c <up>" . ivy-pop-view))
    :config
    (ivy-mode 1)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-use-virtual-buffers t)
    (setq ivy-extra-directories nil) ;; do not show ../  and ./
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t . ivy--regex-fuzzy)))
    :delight ivy-mode)

  (use-package swiper
    :requires ivy
    :after ivy
    :bind("M-s i" . swiper))

  (use-package counsel
    :requires ivy
    :after ivy
    :demand t
    :bind(("M-x" . counsel-M-x)
          ("C-x C-f" . counsel-find-file)
          ("M-j" . counsel-find-file)
          ("M-J" . find-file-other-window)
          ("M-o" . ivy-switch-buffer)
          ("M-O" . counsel-switch-buffer-other-window)
          ("M-y" . counsel-yank-pop)
          ("C-c h f" . counsel-describe-function)
          ("C-c h v" . counsel-describe-variable)
          ("C-c h i" . counsel-info-lookup-symbol)
          ("C-c h u" . counsel-unicode-char)
          ("C-c /" . counsel-imenu)
          ("C-c b" . counsel-bookmark)
          :map read-expression-map
          ("C-r" . counsel-expression-history)))

  ;; counsel-gtags on MELPA now
  (use-package counsel-gtags
    :requires counsel
    :hook (c-mode c++-mode)
    :bind (("M-." . counsel-gtags-dwim)
           ("M-*" . counsel-gtags-go-backwards))
    :delight 'counsel-gtags-mode)

  (use-package prescient
    :custom
    (prescient-history-length 50)
    (prescient-save-file "~/.emacs.d/prescient-items")
    (prescient-filter-method '(fuzzy initialism regexp))
    :config
    (prescient-persist-mode 1))

  (use-package ivy-prescient
    :after (prescient ivy)
    :custom
    (ivy-prescient-sort-commands
     '(:not swiper ivy-switch-buffer counsel-switch-buffer))
    (ivy-prescient-retain-classic-highlighting t)
    (ivy-prescient-enable-filtering t)
    (ivy-prescient-enable-sorting t)
    :config
    (ivy-prescient-mode 1))

  (use-package ivy-posframe
    :requires ivy
    :after ivy
    :config
    (setq ivy-posframe-display-functions-alist
          '((swiper . nil)
            (t . ivy-posframe-display-at-window-center)))
    ;; posframe misses the default font sometimes
    ;; so set is explicitly but this will still not work
    ;; when the font is changed interactively, need to
    ;; check and add a hook.
    (setq ivy-posframe-font (elt (query-font (face-attribute 'default :font)) 0))
    (ivy-posframe-mode 1)
    :delight ivy-posframe-mode)

#+END_SRC


* Shell

With Emacs 25, a new shell opens up in another window messing up the
existing window configuration. The following advice fixes this. ([[https://stackoverflow.com/questions/40301732/m-x-shell-open-shell-in-other-windows][SO]])

Also, adding a simple function to open a shell with a unique /buffer-name/
everytime but ask for a name when universal argument is supplied.


#+BEGIN_SRC emacs-lisp

  (use-package shell
    :config
    ;; -i gets alias definitions from .bash_profile
    (setq shell-command-switch "-ic")

    (defun shell-same-window-advice (orig-fn &optional buffer)
      "Advice to make `shell' reuse the current window. Intended as :around advice."
      (let* ((buffer-regexp
              (regexp-quote
               (cond ((bufferp buffer)  (buffer-name buffer))
                     ((stringp buffer)  buffer)
                     (:else             "*shell*"))))
             (display-buffer-alist
              (cons `(,buffer-regexp display-buffer-same-window)
                    display-buffer-alist)))
        (funcall orig-fn buffer)))

    (advice-add 'shell :around #'shell-same-window-advice)

    (defun pm/shell (&optional name)
      "Open a new shell everytime with unique buffer-name.
  With universal arg, provide a name which will be made unique."
      (interactive
       (if current-prefix-arg
           (list (read-string "Shell name: "))
         (list "shell")))
      (shell (generate-new-buffer-name name)))

    :bind (("<f5>" . pm/shell)
           :map shell-mode-map
           ("C-j" . comint-send-input)))

#+END_SRC


* Utilities

This is a very useful package to create asynchronous processing.

#+BEGIN_SRC emacs-lisp

  (use-package aysnc
    :demand t
    :init
    (async-bytecomp-package-mode 1))

#+END_SRC


** Dired

Setting up dired to group directories upfront and also sort the files by
modification time, by default.

*Tip*: Use 'h' key in the dired buffer to go to the /help/ section which
has tons of useful dired features.

#+BEGIN_SRC emacs-lisp

  (use-package dired
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq dired-isearch-filenames 'dwim)
    (setq delete-by-moving-to-trash t)
    ;(setq dired-listing-switches "-altr --group-directories-first")
    (setq dired-dwim-target t)
    :hook
    (dired-mode . hl-line-mode))

  (use-package dired-async
    :after (dired async)
    :config
    (dired-async-mode 1))

  (use-package wdired
    :after dired
    :commands (wdired-mode
               wdired-change-to-wdired-mode)
    :custom
    (wdired-allow-to-change-permissions t)
    (wdired-create-parent-directories t))

  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)
                ("<C-tab>" . dired-subtree-cycle)
                ("<S-tab>" . dired-subtree-remove)))

#+END_SRC


** Elscreen

Elscreen has similar behaviour and usage as the tmux/screen command
and hence is more intuitive. There are other packages which offer more
like eyebrowse, perspective and workgroups.

#+BEGIN_SRC emacs-lisp

  (use-package elscreen
    :config
    (setq elscreen-display-tab t)
    (elscreen-start))

  ;; Not working well with ivy-switch-buffer
  ;; and other commands.
  (use-package elscreen-buffer-group
    :disabled
    :after elscreen)

#+END_SRC

** Isearch

Treat SPC as * similar to ivy in normal isearch. Use M-SPC to go back
to normal behaviour.

#+BEGIN_SRC emacs-lisp
  (use-package isearch
    :config
    (setq search-whitespace-regexp ".*")
    (setq isearch-lax-whitespace t)
    (setq isearch-regexp-lax-whitespace t))

#+END_SRC

** Ediff

Some sane defaults for Ediff mode. Taken from [[http://oremacs.com/2015/01/17/setting-up-ediff/][here]].

#+BEGIN_SRC emacs-lisp

  ;; (use-package emacs
  ;;   (defmacro csetq (variable value)
  ;;     `(funcall (or (get ',variable 'custom-set)
  ;;                   'set-default)
  ;;               ',variable ,value))

  ;;   (csetq ediff-window-setup-function 'ediff-setup-windows-plain)
  ;;   (csetq ediff-split-window-function 'split-window-horizontally)
  ;;   (csetq ediff-diff-options "-w")
  ;;   (add-hook 'ediff-after-quit-hook-internal 'winner-undo))

#+END_SRC

** Which Key

Nice suggestions for key completions in the minibuffer.

#+BEGIN_SRC emacs-lisp

  ;; which-key
  (use-package which-key
    :config
    (which-key-mode))

#+END_SRC

** Projectile

** Avy

#+BEGIN_SRC emacs-lisp

  (use-package avy
    :bind (("C-;" . avy-goto-word-1)
           ("C-:" . avy-goto-char)
           ("M-g g" . avy-goto-line)
           ("C-'" . avy-isearch)))

#+END_SRC

** Anzu

Display total matches information in the mode-line in various search
modes.

#+BEGIN_SRC emacs-lisp

  ;; Anzu
  (use-package anzu
    :init
    (global-anzu-mode +1)
    (global-set-key [remap query-replace] 'anzu-query-replace)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
    :delight)
#+END_SRC

** Undo-tree

#+BEGIN_SRC emacs-lisp

  (use-package undo-tree
    :config
    (setq global-undo-tree-mode t)
    (setq undo-tree-visualizer-diff t))

#+END_SRC

** Magit

Magit is the best package to work with Git. 

#+BEGIN_SRC emacs-lisp
  ;; Magit

  (use-package magit
    :bind ("<f6>" . magit-status))

#+END_SRC

** Hungry Delete
   
#+BEGIN_SRC emacs-lisp

  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))

#+END_SRC


* Buffers, Windows and Frames

This section setups up packages and options to help with buffer, window, frame
and file management.

** Ace Window

#+BEGIN_SRC emacs-lisp

  (use-package ace-window
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-dispatch-alist
     '((?s aw-swap-window "Swap Windows")
       (?2 aw-split-window-vert "Split Window Vertically")
       (?3 aw-split-window-horz "Split Window Horizontally")
       (?? aw-show-dispatch-help)))
    :config
    (ace-window-display-mode 1)
    :bind ("C-o" . ace-window))

#+END_SRC

** Ibuffer

#+BEGIN_SRC emacs-lisp

  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer-other-window)
    :config
    (setq ibuffer-saved-filter-groups
          (quote (("mygroups"
                   ("dired" (mode . dired-mode))
                   ("perl" (mode . cperl-mode))
                   ("erc" (mode . erc-mode))
                   ("planner" (or
                               (name . "^\\*Calendar\\*$")
                               (name . "^diary$")
                               (mode . muse-mode)))
                   ("emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Messages\\*$")))
                   ("gnus" (or
                            (mode . message-mode)
                            (mode . bbdb-mode)
                            (mode . mail-mode)
                            (mode . gnus-group-mode)
                            (mode . gnus-summary-mode)
                            (mode . gnus-article-mode)
                            (name . "^\\.bbdb$")
                            (name . "^\\.newsrc-dribble")))))))
    (setq ibuffer-expert t)
    (add-hook 'ibuffer-mode-hook
              '(lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "mygroups"))))
#+END_SRC


* Auto-completion

** Hippie Expand

#+BEGIN_SRC emacs-lisp

  ;; hippie-expand
  (use-package hippie-exp
    :bind ("M-/" . hippie-expand)
    :init
    (setq hippie-expand-try-functions-list
          '(try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-complete-file-name-partially
            try-complete-file-name
            try-expand-all-abbrevs
            try-expand-list
            try-expand-line
            try-complete-lisp-symbol-partially
            try-complete-lisp-symbol)))

#+END_SRC


* Programming

** Dtrt-Indent

** Smartparens

** Electric Pair

** Rainbow Delimiters
** Perforce

#+BEGIN_SRC emacs-lisp

  (use-package p4
    :hook prog-mode-hook)

#+END_SRC


* Org Mode

#+BEGIN_SRC emacs-lisp

  (use-package org
    :config
    (setq org-src-window-setup 'current-window)
    (setq org-indent-mode t))


#+END_SRC


* Themes

#+BEGIN_SRC emacs-lisp

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC


* Available key-sequences

The default keybindings are generally not that useful, so these could be used for more frequent commands.

|-----------------------+------------------+---------------------------|
| Keybinding            | Current Function | Potential Fucntion        |
|-----------------------+------------------+---------------------------|
| M-c                   | Capitalize word  |                           |
| C-i                   | Insert tab       |                           |
| M-i                   | Insert tab       |                           |
| C-c except a, c, l, s | Undefined        | This is a good collection |
|-----------------------+------------------+---------------------------|

